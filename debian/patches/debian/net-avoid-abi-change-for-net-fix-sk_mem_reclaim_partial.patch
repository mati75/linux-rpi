From: Ben Hutchings <ben@decadent.org.uk>
Subject: net: Avoid ABI change for "net: fix sk_mem_reclaim_partial()"
Date: Sun, 02 Apr 2017 01:31:03 +0100
Forwarded: not-needed

Commit 1a24e04e4b50939daa3041682b38b82c896ca438 added a parameter to
__sk_mem_reclaim().  Rename the modified function to
__sk_mem_reclaim_amount() and add an ABI-compatible wrapper.

---
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -1411,7 +1411,8 @@ static inline struct inode *SOCK_INODE(s
  * Functions for memory accounting
  */
 int __sk_mem_schedule(struct sock *sk, int size, int kind);
-void __sk_mem_reclaim(struct sock *sk, int amount);
+void __sk_mem_reclaim(struct sock *sk);
+void __sk_mem_reclaim_amount(struct sock *sk, int amount);
 
 #define SK_MEM_QUANTUM ((int)PAGE_SIZE)
 #define SK_MEM_QUANTUM_SHIFT ilog2(SK_MEM_QUANTUM)
@@ -1452,7 +1453,7 @@ static inline void sk_mem_reclaim(struct
 	if (!sk_has_account(sk))
 		return;
 	if (sk->sk_forward_alloc >= SK_MEM_QUANTUM)
-		__sk_mem_reclaim(sk, sk->sk_forward_alloc);
+		__sk_mem_reclaim_amount(sk, sk->sk_forward_alloc);
 }
 
 static inline void sk_mem_reclaim_partial(struct sock *sk)
@@ -1460,7 +1461,7 @@ static inline void sk_mem_reclaim_partia
 	if (!sk_has_account(sk))
 		return;
 	if (sk->sk_forward_alloc > SK_MEM_QUANTUM)
-		__sk_mem_reclaim(sk, sk->sk_forward_alloc - 1);
+		__sk_mem_reclaim_amount(sk, sk->sk_forward_alloc - 1);
 }
 
 static inline void sk_mem_charge(struct sock *sk, int size)
@@ -1484,7 +1485,7 @@ static inline void sk_mem_uncharge(struc
 	 * no need to hold that much forward allocation anyway.
 	 */
 	if (unlikely(sk->sk_forward_alloc >= 1 << 21))
-		__sk_mem_reclaim(sk, 1 << 20);
+		__sk_mem_reclaim_amount(sk, 1 << 20);
 }
 
 static inline void sk_wmem_free_skb(struct sock *sk, struct sk_buff *skb)
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@ -2130,11 +2130,11 @@ suppress_allocation:
 EXPORT_SYMBOL(__sk_mem_schedule);
 
 /**
- *	__sk_reclaim - reclaim memory_allocated
+ *	__sk_reclaim_amount - reclaim memory_allocated
  *	@sk: socket
  *	@amount: number of bytes (rounded down to a SK_MEM_QUANTUM multiple)
  */
-void __sk_mem_reclaim(struct sock *sk, int amount)
+void __sk_mem_reclaim_amount(struct sock *sk, int amount)
 {
 	amount >>= SK_MEM_QUANTUM_SHIFT;
 	sk_memory_allocated_sub(sk, amount);
@@ -2144,8 +2144,13 @@ void __sk_mem_reclaim(struct sock *sk, i
 	    (sk_memory_allocated(sk) < sk_prot_mem_limits(sk, 0)))
 		sk_leave_memory_pressure(sk);
 }
-EXPORT_SYMBOL(__sk_mem_reclaim);
+EXPORT_SYMBOL(__sk_mem_reclaim_amount);
 
+void __sk_mem_reclaim(struct sock *sk)
+{
+	__sk_mem_reclaim_amount(sk, sk->sk_forward_alloc);
+}
+EXPORT_SYMBOL(__sk_mem_reclaim);
 
 /*
  * Set of default routines for initialising struct proto_ops when
