From: Ben Hutchings <ben@decadent.org.uk>
Date: Mon, 27 Nov 2017 19:48:12 +0000
Subject: sched: Avoid ABI change in 3.16.49
Forwarded: not-needed

The backports of commits 5f3333219189 "sched: move no_new_privs into
new atomic flags" and e0e5070b20e0 "sched: add macros to define bitops
for task atomic flags" replaced the no_new_privs bitfield with a new
field in struct task_struct, which will change ABI for most symbols in
the kernel.

However, task_struct is always allocated by built-in code and both
fields are/were only accessed by built-in code.  Move the new field
to the end, add a padding bit in place of the old bitfield, and hide
the changes from genksyms.

---
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1320,12 +1320,16 @@ struct task_struct {
 				 * execve */
 	unsigned in_iowait:1;
 
+#ifndef __GENKSYMS__
+	unsigned :1;
+#else
+	unsigned no_new_privs:1;
+#endif
+
 	/* Revert to default priority/policy when forking */
 	unsigned sched_reset_on_fork:1;
 	unsigned sched_contributes_to_load:1;
 
-	unsigned long atomic_flags; /* Flags needing atomic access. */
-
 	pid_t pid;
 	pid_t tgid;
 
@@ -1667,6 +1671,9 @@ struct task_struct {
 	unsigned int	sequential_io;
 	unsigned int	sequential_io_avg;
 #endif
+#ifndef __GENKSYMS__
+	unsigned long atomic_flags; /* Flags needing atomic access. */
+#endif
 };
 
 /* Future-safe accessor for struct task_struct's cpus_allowed. */
