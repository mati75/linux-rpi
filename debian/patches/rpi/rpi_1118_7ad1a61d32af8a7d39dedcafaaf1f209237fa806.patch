commit 7ad1a61d32af8a7d39dedcafaaf1f209237fa806
Author: Boris Brezillon <boris.brezillon@free-electrons.com>
Date:   Sat Nov 11 16:08:34 2017 +0100

    mtd: Avoid probe failures when mtd->dbg.dfs_dir is invalid
    
    commit 1530578abdac4edce9244c7a1962ded3ffdb58ce upstream.
    
    Commit e8e3edb95ce6 ("mtd: create per-device and module-scope debugfs
    entries") tried to make MTD related debugfs stuff consistent across the
    MTD framework by creating a root <debugfs>/mtd/ directory containing
    one directory per MTD device.
    
    The problem is that, by default, the MTD layer only registers the
    master device if no partitions are defined for this master. This
    behavior breaks all drivers that expect mtd->dbg.dfs_dir to be filled
    correctly after calling mtd_device_register() in order to add their own
    debugfs entries.
    
    The only way we can force all MTD masters to be registered no matter if
    they expose partitions or not is by enabling the
    CONFIG_MTD_PARTITIONED_MASTER option.
    
    In such situations, there's no other solution but to accept skipping
    debugfs initialization when dbg.dfs_dir is invalid, and when this
    happens, inform the user that he should consider enabling
    CONFIG_MTD_PARTITIONED_MASTER.
    
    Fixes: e8e3edb95ce6 ("mtd: create per-device and module-scope debugfs entries")
    Cc: Mario J. Rugiero <mrugiero@gmail.com>
    Signed-off-by: Boris Brezillon <boris.brezillon@free-electrons.com>
    Reported-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/mtd/devices/docg3.c b/drivers/mtd/devices/docg3.c
index 84b16133554b..0806f72102c0 100644
--- a/drivers/mtd/devices/docg3.c
+++ b/drivers/mtd/devices/docg3.c
@@ -1814,8 +1814,13 @@ static void __init doc_dbg_register(struct mtd_info *floor)
 	struct dentry *root = floor->dbg.dfs_dir;
 	struct docg3 *docg3 = floor->priv;
 
-	if (IS_ERR_OR_NULL(root))
+	if (IS_ERR_OR_NULL(root)) {
+		if (IS_ENABLED(CONFIG_DEBUG_FS) &&
+		    !IS_ENABLED(CONFIG_MTD_PARTITIONED_MASTER))
+			dev_warn(floor->dev.parent,
+				 "CONFIG_MTD_PARTITIONED_MASTER must be enabled to expose debugfs stuff\n");
 		return;
+	}
 
 	debugfs_create_file("docg3_flashcontrol", S_IRUSR, root, docg3,
 			    &flashcontrol_fops);
diff --git a/drivers/mtd/nand/nandsim.c b/drivers/mtd/nand/nandsim.c
index 246b4393118e..44322a363ba5 100644
--- a/drivers/mtd/nand/nandsim.c
+++ b/drivers/mtd/nand/nandsim.c
@@ -520,11 +520,16 @@ static int nandsim_debugfs_create(struct nandsim *dev)
 	struct dentry *root = nsmtd->dbg.dfs_dir;
 	struct dentry *dent;
 
-	if (!IS_ENABLED(CONFIG_DEBUG_FS))
+	/*
+	 * Just skip debugfs initialization when the debugfs directory is
+	 * missing.
+	 */
+	if (IS_ERR_OR_NULL(root)) {
+		if (IS_ENABLED(CONFIG_DEBUG_FS) &&
+		    !IS_ENABLED(CONFIG_MTD_PARTITIONED_MASTER))
+			NS_WARN("CONFIG_MTD_PARTITIONED_MASTER must be enabled to expose debugfs stuff\n");
 		return 0;
-
-	if (IS_ERR_OR_NULL(root))
-		return -1;
+	}
 
 	dent = debugfs_create_file("nandsim_wear_report", S_IRUSR,
 				   root, dev, &dfs_fops);
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1118_7ad1a61d32af8a7d39dedcafaaf1f209237fa806.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1118_7ad1a61d32af8a7d39dedcafaaf1f209237fa806.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
