commit c21261e6311a7d237da47b608e933f3abd7e534e
Author: Jeff Moyer <jmoyer@redhat.com>
Date:   Tue Nov 14 20:37:27 2017 -0500

    dax: fix PMD faults on zero-length files
    
    commit 957ac8c421ad8b5eef9b17fe98e146d8311a541e upstream.
    
    PMD faults on a zero length file on a file system mounted with -o dax
    will not generate SIGBUS as expected.
    
            fd = open(...O_TRUNC);
            addr = mmap(NULL, 2*1024*1024, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);
            *addr = 'a';
            <expect SIGBUS>
    
    The problem is this code in dax_iomap_pmd_fault:
    
            max_pgoff = (i_size_read(inode) - 1) >> PAGE_SHIFT;
    
    If the inode size is zero, we end up with a max_pgoff that is way larger
    than 0.  :)  Fix it by using DIV_ROUND_UP, as is done elsewhere in the
    kernel.
    
    I tested this with some simple test code that ensured that SIGBUS was
    received where expected.
    
    Fixes: 642261ac995e ("dax: add struct iomap based DAX PMD support")
    Signed-off-by: Jeff Moyer <jmoyer@redhat.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/fs/dax.c b/fs/dax.c
index f001d8c72a06..191306cd8b6b 100644
--- a/fs/dax.c
+++ b/fs/dax.c
@@ -1327,7 +1327,7 @@ static int dax_iomap_pmd_fault(struct vm_fault *vmf,
 	 * this is a reliable test.
 	 */
 	pgoff = linear_page_index(vma, pmd_addr);
-	max_pgoff = (i_size_read(inode) - 1) >> PAGE_SHIFT;
+	max_pgoff = DIV_ROUND_UP(i_size_read(inode), PAGE_SIZE);
 
 	trace_dax_pmd_fault(inode, vmf, max_pgoff, 0);
 
@@ -1351,13 +1351,13 @@ static int dax_iomap_pmd_fault(struct vm_fault *vmf,
 	if ((pmd_addr + PMD_SIZE) > vma->vm_end)
 		goto fallback;
 
-	if (pgoff > max_pgoff) {
+	if (pgoff >= max_pgoff) {
 		result = VM_FAULT_SIGBUS;
 		goto out;
 	}
 
 	/* If the PMD would extend beyond the file size */
-	if ((pgoff | PG_PMD_COLOUR) > max_pgoff)
+	if ((pgoff | PG_PMD_COLOUR) >= max_pgoff)
 		goto fallback;
 
 	/*
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1135_c21261e6311a7d237da47b608e933f3abd7e534e.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1135_c21261e6311a7d237da47b608e933f3abd7e534e.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
