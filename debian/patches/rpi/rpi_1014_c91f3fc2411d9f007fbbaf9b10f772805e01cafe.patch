commit c91f3fc2411d9f007fbbaf9b10f772805e01cafe
Author: Andy Lutomirski <luto@kernel.org>
Date:   Tue Nov 21 20:43:56 2017 -0800

    x86/entry/64: Fix entry_SYSCALL_64_after_hwframe() IRQ tracing
    
    commit 548c3050ea8d16997ae27f9e080a8338a606fc93 upstream.
    
    When I added entry_SYSCALL_64_after_hwframe(), I left TRACE_IRQS_OFF
    before it.  This means that users of entry_SYSCALL_64_after_hwframe()
    were responsible for invoking TRACE_IRQS_OFF, and the one and only
    user (Xen, added in the same commit) got it wrong.
    
    I think this would manifest as a warning if a Xen PV guest with
    CONFIG_DEBUG_LOCKDEP=y were used with context tracking.  (The
    context tracking bit is to cause lockdep to get invoked before we
    turn IRQs back on.)  I haven't tested that for real yet because I
    can't get a kernel configured like that to boot at all on Xen PV.
    
    Move TRACE_IRQS_OFF below the label.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Cc: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Cc: Borislav Petkov <bpetkov@suse.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: 8a9949bc71a7 ("x86/xen/64: Rearrange the SYSCALL entries")
    Link: http://lkml.kernel.org/r/9150aac013b7b95d62c2336751d5b6e91d2722aa.1511325444.git.luto@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/x86/entry/entry_64.S b/arch/x86/entry/entry_64.S
index bcfc5668dcb2..2e956afe272c 100644
--- a/arch/x86/entry/entry_64.S
+++ b/arch/x86/entry/entry_64.S
@@ -148,8 +148,6 @@ ENTRY(entry_SYSCALL_64)
 	movq	%rsp, PER_CPU_VAR(rsp_scratch)
 	movq	PER_CPU_VAR(cpu_current_top_of_stack), %rsp
 
-	TRACE_IRQS_OFF
-
 	/* Construct struct pt_regs on stack */
 	pushq	$__USER_DS			/* pt_regs->ss */
 	pushq	PER_CPU_VAR(rsp_scratch)	/* pt_regs->sp */
@@ -170,6 +168,8 @@ GLOBAL(entry_SYSCALL_64_after_hwframe)
 	sub	$(6*8), %rsp			/* pt_regs->bp, bx, r12-15 not saved */
 	UNWIND_HINT_REGS extra=0
 
+	TRACE_IRQS_OFF
+
 	/*
 	 * If we need to do entry work or if we guess we'll need to do
 	 * exit work, go straight to the slow path.
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1014_c91f3fc2411d9f007fbbaf9b10f772805e01cafe.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1014_c91f3fc2411d9f007fbbaf9b10f772805e01cafe.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
