commit 44a4adbc9949653a89e027a86caf373ec49a2fd1
Author: Balbir Singh <bsingharora@gmail.com>
Date:   Mon Oct 16 16:21:35 2017 +1100

    powerpc/mm/radix: Fix crashes on Power9 DD1 with radix MMU and STRICT_RWX
    
    commit f79ad50ea3c73fb1ea5b09e95c864e5bb263adfb upstream.
    
    When using the radix MMU on Power9 DD1, to work around a hardware
    problem, radix__pte_update() is required to do a two stage update of
    the PTE. First we write a zero value into the PTE, then we flush the
    TLB, and then we write the new PTE value.
    
    In the normal case that works OK, but it does not work if we're
    updating the PTE that maps the code we're executing, because the
    mapping is removed by the TLB flush and we can no longer execute from
    it. Unfortunately the STRICT_RWX code needs to do exactly that.
    
    The exact symptoms when we hit this case vary, sometimes we print an
    oops and then get stuck after that, but I've also seen a machine just
    get stuck continually page faulting with no oops printed. The variance
    is presumably due to the exact layout of the text and the page size
    used for the mappings. In all cases we are unable to boot to a shell.
    
    There are possible solutions such as creating a second mapping of the
    TLB flush code, executing from that, and then jumping back to the
    original. However we don't want to add that level of complexity for a
    DD1 work around.
    
    So just detect that we're running on Power9 DD1 and refrain from
    changing the permissions, effectively disabling STRICT_RWX on Power9
    DD1.
    
    Fixes: 7614ff3272a1 ("powerpc/mm/radix: Implement STRICT_RWX/mark_rodata_ro() for Radix")
    Reported-by: Andrew Jeffery <andrew@aj.id.au>
    [Changelog as suggested by Michael Ellerman <mpe@ellerman.id.au>]
    Signed-off-by: Balbir Singh <bsingharora@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/powerpc/mm/pgtable-radix.c b/arch/powerpc/mm/pgtable-radix.c
index 39c252b54d16..cfbbee941a76 100644
--- a/arch/powerpc/mm/pgtable-radix.c
+++ b/arch/powerpc/mm/pgtable-radix.c
@@ -169,6 +169,16 @@ void radix__mark_rodata_ro(void)
 {
 	unsigned long start, end;
 
+	/*
+	 * mark_rodata_ro() will mark itself as !writable at some point.
+	 * Due to DD1 workaround in radix__pte_update(), we'll end up with
+	 * an invalid pte and the system will crash quite severly.
+	 */
+	if (cpu_has_feature(CPU_FTR_POWER9_DD1)) {
+		pr_warn("Warning: Unable to mark rodata read only on P9 DD1\n");
+		return;
+	}
+
 	start = (unsigned long)_stext;
 	end = (unsigned long)__init_begin;
 
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1162_44a4adbc9949653a89e027a86caf373ec49a2fd1.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1162_44a4adbc9949653a89e027a86caf373ec49a2fd1.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
