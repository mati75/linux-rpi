commit 668a1285187668ce162a3aa6b4f5e3272e659954
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Oct 10 18:09:49 2017 +0200

    serdev: fix registration of second slave
    
    commit 08fcee289f341786eb3b44e5f2d1dc850943238e upstream.
    
    Serdev currently only supports a single slave device, but the required
    sanity checks to prevent further registration attempts were missing.
    
    If a serial-port node has two child nodes with compatible properties,
    the OF code would try to register two slave devices using the same id
    and name. Driver core will not allow this (and there will be loud
    complaints), but the controller's slave pointer would already have been
    set to address of the soon to be deallocated second struct
    serdev_device. As the first slave device remains registered, this can
    lead to later use-after-free issues when the slave callbacks are
    accessed.
    
    Note that while the serdev registration helpers are exported, they are
    typically only called by serdev core. Any other (out-of-tree) callers
    must serialise registration and deregistration themselves.
    
    Fixes: cd6484e1830b ("serdev: Introduce new bus for serial attached devices")
    Cc: Rob Herring <robh@kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/tty/serdev/core.c b/drivers/tty/serdev/core.c
index c68fb3a8ea1c..97db76afced2 100644
--- a/drivers/tty/serdev/core.c
+++ b/drivers/tty/serdev/core.c
@@ -65,21 +65,32 @@ static int serdev_uevent(struct device *dev, struct kobj_uevent_env *env)
  */
 int serdev_device_add(struct serdev_device *serdev)
 {
+	struct serdev_controller *ctrl = serdev->ctrl;
 	struct device *parent = serdev->dev.parent;
 	int err;
 
 	dev_set_name(&serdev->dev, "%s-%d", dev_name(parent), serdev->nr);
 
+	/* Only a single slave device is currently supported. */
+	if (ctrl->serdev) {
+		dev_err(&serdev->dev, "controller busy\n");
+		return -EBUSY;
+	}
+	ctrl->serdev = serdev;
+
 	err = device_add(&serdev->dev);
 	if (err < 0) {
 		dev_err(&serdev->dev, "Can't add %s, status %d\n",
 			dev_name(&serdev->dev), err);
-		goto err_device_add;
+		goto err_clear_serdev;
 	}
 
 	dev_dbg(&serdev->dev, "device %s registered\n", dev_name(&serdev->dev));
 
-err_device_add:
+	return 0;
+
+err_clear_serdev:
+	ctrl->serdev = NULL;
 	return err;
 }
 EXPORT_SYMBOL_GPL(serdev_device_add);
@@ -90,7 +101,10 @@ EXPORT_SYMBOL_GPL(serdev_device_add);
  */
 void serdev_device_remove(struct serdev_device *serdev)
 {
+	struct serdev_controller *ctrl = serdev->ctrl;
+
 	device_unregister(&serdev->dev);
+	ctrl->serdev = NULL;
 }
 EXPORT_SYMBOL_GPL(serdev_device_remove);
 
@@ -295,7 +309,6 @@ struct serdev_device *serdev_device_alloc(struct serdev_controller *ctrl)
 		return NULL;
 
 	serdev->ctrl = ctrl;
-	ctrl->serdev = serdev;
 	device_initialize(&serdev->dev);
 	serdev->dev.parent = &ctrl->dev;
 	serdev->dev.bus = &serdev_bus_type;
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1009_668a1285187668ce162a3aa6b4f5e3272e659954.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1009_668a1285187668ce162a3aa6b4f5e3272e659954.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
