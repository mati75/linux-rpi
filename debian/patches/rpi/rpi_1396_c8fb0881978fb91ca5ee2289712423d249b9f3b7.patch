commit c8fb0881978fb91ca5ee2289712423d249b9f3b7
Author: Roland Dreier <roland@purestorage.com>
Date:   Tue Jun 6 09:22:00 2017 -0700

    IB/addr: Fix setting source address in addr6_resolve()
    
    commit 79e25959403e6a79552db28a87abed34de32a1df upstream.
    
    Commit eea40b8f624f ("infiniband: call ipv6 route lookup via the stub
    interface") introduced a regression in address resolution when connecting
    to IPv6 destination addresses.  The old code called ip6_route_output(),
    while the new code calls ipv6_stub->ipv6_dst_lookup().  The two are almost
    the same, except that ipv6_dst_lookup() also calls ip6_route_get_saddr()
    if the source address is in6addr_any.
    
    This means that the test of ipv6_addr_any(&fl6.saddr) now never succeeds,
    and so we never copy the source address out.  This ends up causing
    rdma_resolve_addr() to fail, because without a resolved source address,
    cma_acquire_dev() will fail to find an RDMA device to use.  For me, this
    causes connecting to an NVMe over Fabrics target via RoCE / IPv6 to fail.
    
    Fix this by copying out fl6.saddr if ipv6_addr_any() is true for the original
    source address passed into addr6_resolve().  We can drop our call to
    ipv6_dev_get_saddr() because ipv6_dst_lookup() already does that work.
    
    Fixes: eea40b8f624 ("infiniband: call ipv6 route lookup via the stub interface")
    Signed-off-by: Roland Dreier <roland@purestorage.com>
    Acked-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Signed-off-by: Raju Rangoju <rajur@chelsio.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/infiniband/core/addr.c b/drivers/infiniband/core/addr.c
index 63e82f8e8308..fb4ce0394ac7 100644
--- a/drivers/infiniband/core/addr.c
+++ b/drivers/infiniband/core/addr.c
@@ -446,15 +446,10 @@ static int addr6_resolve(struct sockaddr_in6 *src_in,
 
 	ret = ipv6_stub->ipv6_dst_lookup(addr->net, NULL, &dst, &fl6);
 	if (ret < 0)
-		goto put;
+		return ret;
 
 	rt = (struct rt6_info *)dst;
-	if (ipv6_addr_any(&fl6.saddr)) {
-		ret = ipv6_dev_get_saddr(addr->net, ip6_dst_idev(dst)->dev,
-					 &fl6.daddr, 0, &fl6.saddr);
-		if (ret)
-			goto put;
-
+	if (ipv6_addr_any(&src_in->sin6_addr)) {
 		src_in->sin6_family = AF_INET6;
 		src_in->sin6_addr = fl6.saddr;
 	}
@@ -471,9 +466,6 @@ static int addr6_resolve(struct sockaddr_in6 *src_in,
 
 	*pdst = dst;
 	return 0;
-put:
-	dst_release(dst);
-	return ret;
 }
 #else
 static int addr6_resolve(struct sockaddr_in6 *src_in,
