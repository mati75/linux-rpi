commit 71dd9ac555c50d4d233acd54f24d97c0f1541aa1
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Thu Aug 24 15:56:29 2017 -0700

    net: bcmgenet: Be drop monitor friendly
    
    
    [ Upstream commit d4fec855905fa8bd5fb1c59f73ad2d74a944876a ]
    
    There are 3 spots where we call dev_kfree_skb() but we are actually
    just doing a normal SKB consumption: __bcmgenet_tx_reclaim() for normal
    TX reclamation, bcmgenet_alloc_rx_buffers() during the initial RX ring
    setup and bcmgenet_free_rx_buffers() during RX ring cleanup.
    
    Fixes: d6707bec5986 ("net: bcmgenet: rewrite bcmgenet_rx_refill()")
    Fixes: f48bed16a756 ("net: bcmgenet: Free skb after last Tx frag")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/net/ethernet/broadcom/genet/bcmgenet.c b/drivers/net/ethernet/broadcom/genet/bcmgenet.c
index a205a9ff9e17..ccb325cf03b5 100644
--- a/drivers/net/ethernet/broadcom/genet/bcmgenet.c
+++ b/drivers/net/ethernet/broadcom/genet/bcmgenet.c
@@ -1203,7 +1203,7 @@ static struct enet_cb *bcmgenet_get_txcb(struct bcmgenet_priv *priv,
 /* Simple helper to free a control block's resources */
 static void bcmgenet_free_cb(struct enet_cb *cb)
 {
-	dev_kfree_skb_any(cb->skb);
+	dev_consume_skb_any(cb->skb);
 	cb->skb = NULL;
 	dma_unmap_addr_set(cb, dma_addr, 0);
 }
@@ -1868,7 +1868,7 @@ static int bcmgenet_alloc_rx_buffers(struct bcmgenet_priv *priv,
 		cb = ring->cbs + i;
 		skb = bcmgenet_rx_refill(priv, cb);
 		if (skb)
-			dev_kfree_skb_any(skb);
+			dev_consume_skb_any(skb);
 		if (!cb->skb)
 			return -ENOMEM;
 	}
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1011_71dd9ac555c50d4d233acd54f24d97c0f1541aa1.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1011_71dd9ac555c50d4d233acd54f24d97c0f1541aa1.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
