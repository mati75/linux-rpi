commit b930e7f6659d5ae497b53a270d2ed65bac9d0a17
Author: popcornmix <popcornmix@gmail.com>
Date:   Wed Sep 3 23:35:44 2014 +0100

    bcm2708_fb: Add pan and vsync controls

diff --git a/drivers/video/fbdev/bcm2708_fb.c b/drivers/video/fbdev/bcm2708_fb.c
index b25dd5b..ffa584b 100644
--- a/drivers/video/fbdev/bcm2708_fb.c
+++ b/drivers/video/fbdev/bcm2708_fb.c
@@ -38,6 +38,9 @@
 #include <linux/io.h>
 #include <linux/dma-mapping.h>
 
+//#define BCM2708_FB_DEBUG
+#define MODULE_NAME "bcm2708_fb"
+
 #ifdef BCM2708_FB_DEBUG
 #define print_debug(fmt,...) pr_debug("%s:%s:%d: "fmt, MODULE_NAME, __func__, __LINE__, ##__VA_ARGS__)
 #else
@@ -375,16 +378,14 @@ static int bcm2708_fb_setcolreg(unsigned int regno, unsigned int red,
 	}
 	return regno > 255;
 }
+
 static int bcm2708_fb_blank(int blank_mode, struct fb_info *info)
 {
-	s32 result = -1 ; 
+	s32 result = -1;
 	u32 p[7];
 	if ( 	(blank_mode == FB_BLANK_NORMAL) || 
 		(blank_mode == FB_BLANK_UNBLANK)) {
-		
-		pr_info("bcm2708_fb_blank blank_mode=%d\n",blank_mode);
-		
-		
+
 		p[0] = 28; //  size = sizeof u32 * length of p
 		p[1] = VCMSG_PROCESS_REQUEST; // process request
 		p[2] = VCMSG_SET_BLANK_SCREEN; // (the tag id)
@@ -395,15 +396,45 @@ static int bcm2708_fb_blank(int blank_mode, struct fb_info *info)
 	
 		bcm_mailbox_property(&p, p[0]);
 	
-		pr_info("bcm2708_fb_blank returns=%d p[1]=0x%x\n",p[5],p[1]);
+		pr_info("bcm2708_fb_blank(%d) returns=%d p[1]=0x%x\n", blank_mode, p[5], p[1]);
 	
 		if ( p[1] == VCMSG_REQUEST_SUCCESSFUL )
-			result = 0 ; 
-	    
+			result = 0;
 	}
 	return result;
+}
 
+static int bcm2708_fb_pan_display(struct fb_var_screeninfo *var, struct fb_info *info)
+{
+	s32 result = -1;
+	info->var.xoffset = var->xoffset;
+	info->var.yoffset = var->yoffset;
+	result = bcm2708_fb_set_par(info);
+	pr_info("bcm2708_fb_pan_display(%d,%d) returns=%d\n", var->xoffset, var->yoffset, result);
+	return result;
+}
 
+static int bcm2708_ioctl(struct fb_info *info, unsigned int cmd, unsigned long arg)
+{
+	s32 result = -1;
+	u32 p[7];
+	if (cmd == FBIO_WAITFORVSYNC) {
+		p[0] = 28; //  size = sizeof u32 * length of p
+		p[1] = VCMSG_PROCESS_REQUEST; // process request
+		p[2] = VCMSG_SET_VSYNC; // (the tag id)
+		p[3] = 4; // (size of the response buffer)
+		p[4] = 4; // (size of the request data)
+		p[5] = 0; // dummy
+		p[6] = VCMSG_PROPERTY_END; // end tag
+
+		bcm_mailbox_property(&p, p[0]);
+
+		pr_info("bcm2708_fb_ioctl %x,%lx returns=%d p[1]=0x%x\n", cmd, arg, p[5], p[1]);
+
+		if ( p[1] == VCMSG_REQUEST_SUCCESSFUL )
+			result = 0;
+	}
+	return result;
 }
 static void bcm2708_fb_fillrect(struct fb_info *info,
 				const struct fb_fillrect *rect)
@@ -590,6 +621,8 @@ static struct fb_ops bcm2708_fb_ops = {
 	.fb_fillrect = bcm2708_fb_fillrect,
 	.fb_copyarea = bcm2708_fb_copyarea,
 	.fb_imageblit = bcm2708_fb_imageblit,
+	.fb_pan_display = bcm2708_fb_pan_display,
+	.fb_ioctl = bcm2708_ioctl,
 };
 
 static int bcm2708_fb_register(struct bcm2708_fb *fb)
@@ -616,8 +649,8 @@ static int bcm2708_fb_register(struct bcm2708_fb *fb)
 	strncpy(fb->fb.fix.id, bcm2708_name, sizeof(fb->fb.fix.id));
 	fb->fb.fix.type = FB_TYPE_PACKED_PIXELS;
 	fb->fb.fix.type_aux = 0;
-	fb->fb.fix.xpanstep = 0;
-	fb->fb.fix.ypanstep = 0;
+	fb->fb.fix.xpanstep = 1;
+	fb->fb.fix.ypanstep = 1;
 	fb->fb.fix.ywrapstep = 0;
 	fb->fb.fix.accel = FB_ACCEL_NONE;
 
