commit c85364c66e7dd03336d70e98dd6fc5881f34dcb8
Author: Dexuan Cui <decui@microsoft.com>
Date:   Wed Nov 1 20:30:53 2017 +0000

    PCI: hv: Use effective affinity mask
    
    commit 79aa801e899417a56863d6713f76c4e108856000 upstream.
    
    The effective_affinity_mask is always set when an interrupt is assigned in
    __assign_irq_vector() -> apic->cpu_mask_to_apicid(), e.g. for struct apic
    apic_physflat: -> default_cpu_mask_to_apicid() ->
    irq_data_update_effective_affinity(), but it looks d->common->affinity
    remains all-1's before the user space or the kernel changes it later.
    
    In the early allocation/initialization phase of an IRQ, we should use the
    effective_affinity_mask, otherwise Hyper-V may not deliver the interrupt to
    the expected CPU.  Without the patch, if we assign 7 Mellanox ConnectX-3
    VFs to a 32-vCPU VM, one of the VFs may fail to receive interrupts.
    
    Tested-by: Adrian Suhov <v-adsuho@microsoft.com>
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Jake Oshins <jakeo@microsoft.com>
    Cc: Jork Loeser <jloeser@microsoft.com>
    Cc: Stephen Hemminger <sthemmin@microsoft.com>
    Cc: K. Y. Srinivasan <kys@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/pci/host/pci-hyperv.c b/drivers/pci/host/pci-hyperv.c
index 0fe3ea164ee5..04dac6a42c9f 100644
--- a/drivers/pci/host/pci-hyperv.c
+++ b/drivers/pci/host/pci-hyperv.c
@@ -879,7 +879,7 @@ static void hv_irq_unmask(struct irq_data *data)
 	int cpu;
 	u64 res;
 
-	dest = irq_data_get_affinity_mask(data);
+	dest = irq_data_get_effective_affinity_mask(data);
 	pdev = msi_desc_to_pci_dev(msi_desc);
 	pbus = pdev->bus;
 	hbus = container_of(pbus->sysdata, struct hv_pcibus_device, sysdata);
@@ -1042,6 +1042,7 @@ static void hv_compose_msi_msg(struct irq_data *data, struct msi_msg *msg)
 	struct hv_pci_dev *hpdev;
 	struct pci_bus *pbus;
 	struct pci_dev *pdev;
+	struct cpumask *dest;
 	struct compose_comp_ctxt comp;
 	struct tran_int_desc *int_desc;
 	struct {
@@ -1056,6 +1057,7 @@ static void hv_compose_msi_msg(struct irq_data *data, struct msi_msg *msg)
 	int ret;
 
 	pdev = msi_desc_to_pci_dev(irq_data_get_msi_desc(data));
+	dest = irq_data_get_effective_affinity_mask(data);
 	pbus = pdev->bus;
 	hbus = container_of(pbus->sysdata, struct hv_pcibus_device, sysdata);
 	hpdev = get_pcichild_wslot(hbus, devfn_to_wslot(pdev->devfn));
@@ -1081,14 +1083,14 @@ static void hv_compose_msi_msg(struct irq_data *data, struct msi_msg *msg)
 	switch (pci_protocol_version) {
 	case PCI_PROTOCOL_VERSION_1_1:
 		size = hv_compose_msi_req_v1(&ctxt.int_pkts.v1,
-					irq_data_get_affinity_mask(data),
+					dest,
 					hpdev->desc.win_slot.slot,
 					cfg->vector);
 		break;
 
 	case PCI_PROTOCOL_VERSION_1_2:
 		size = hv_compose_msi_req_v2(&ctxt.int_pkts.v2,
-					irq_data_get_affinity_mask(data),
+					dest,
 					hpdev->desc.win_slot.slot,
 					cfg->vector);
 		break;
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1031_c85364c66e7dd03336d70e98dd6fc5881f34dcb8.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1031_c85364c66e7dd03336d70e98dd6fc5881f34dcb8.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
