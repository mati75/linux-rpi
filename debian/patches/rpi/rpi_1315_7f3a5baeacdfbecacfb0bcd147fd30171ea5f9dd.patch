commit 7f3a5baeacdfbecacfb0bcd147fd30171ea5f9dd
Author: Thiago Jung Bauermann <bauerman@linux.ibm.com>
Date:   Thu Sep 20 01:38:58 2018 -0300

    powerpc/pkeys: Fix reading of ibm, processor-storage-keys property
    
    commit c716a25b9b70084e1144f77423f5aedd772ea478 upstream.
    
    scan_pkey_feature() uses of_property_read_u32_array() to read the
    ibm,processor-storage-keys property and calls be32_to_cpu() on the
    value it gets. The problem is that of_property_read_u32_array() already
    returns the value converted to the CPU byte order.
    
    The value of pkeys_total ends up more or less sane because there's a min()
    call in pkey_initialize() which reduces pkeys_total to 32. So in practice
    the kernel ignores the fact that the hypervisor reserved one key for
    itself (the device tree advertises 31 keys in my test VM).
    
    This is wrong, but the effect in practice is that when a process tries to
    allocate the 32nd key, it gets an -EINVAL error instead of -ENOSPC which
    would indicate that there aren't any keys available
    
    Fixes: cf43d3b26452 ("powerpc: Enable pkey subsystem")
    Cc: stable@vger.kernel.org # v4.16+
    Signed-off-by: Thiago Jung Bauermann <bauerman@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/powerpc/mm/pkeys.c b/arch/powerpc/mm/pkeys.c
index 0e7810ccd1ae..c18d17d830a1 100644
--- a/arch/powerpc/mm/pkeys.c
+++ b/arch/powerpc/mm/pkeys.c
@@ -44,7 +44,7 @@ static void scan_pkey_feature(void)
 	 * Since any pkey can be used for data or execute, we will just treat
 	 * all keys as equal and track them as one entity.
 	 */
-	pkeys_total = be32_to_cpu(vals[0]);
+	pkeys_total = vals[0];
 	pkeys_devtree_defined = true;
 }
 
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1315_7f3a5baeacdfbecacfb0bcd147fd30171ea5f9dd.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1315_7f3a5baeacdfbecacfb0bcd147fd30171ea5f9dd.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
