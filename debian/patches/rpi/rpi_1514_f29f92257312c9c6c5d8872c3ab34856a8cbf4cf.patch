commit f29f92257312c9c6c5d8872c3ab34856a8cbf4cf
Author: Ross Zwisler <ross.zwisler@linux.intel.com>
Date:   Mon Sep 18 14:46:03 2017 -0700

    xfs: validate bdev support for DAX inode flag
    
    commit 6851a3db7e224bbb85e23b3c64a506c9e0904382 upstream.
    
    Currently only the blocksize is checked, but we should really be calling
    bdev_dax_supported() which also tests to make sure we can get a
    struct dax_device and that the dax_direct_access() path is working.
    
    This is the same check that we do for the "-o dax" mount option in
    xfs_fs_fill_super().
    
    This does not fix the race issues that caused the XFS DAX inode option to
    be disabled, so that option will still be disabled.  If/when we re-enable
    it, though, I think we will want this issue to have been fixed.  I also do
    think that we want to fix this in stable kernels.
    
    Signed-off-by: Ross Zwisler <ross.zwisler@linux.intel.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/fs/xfs/xfs_ioctl.c b/fs/xfs/xfs_ioctl.c
index bce2e260f55e..6c95812120eb 100644
--- a/fs/xfs/xfs_ioctl.c
+++ b/fs/xfs/xfs_ioctl.c
@@ -1085,6 +1085,7 @@ xfs_ioctl_setattr_dax_invalidate(
 	int			*join_flags)
 {
 	struct inode		*inode = VFS_I(ip);
+	struct super_block	*sb = inode->i_sb;
 	int			error;
 
 	*join_flags = 0;
@@ -1097,7 +1098,7 @@ xfs_ioctl_setattr_dax_invalidate(
 	if (fa->fsx_xflags & FS_XFLAG_DAX) {
 		if (!(S_ISREG(inode->i_mode) || S_ISDIR(inode->i_mode)))
 			return -EINVAL;
-		if (ip->i_mount->m_sb.sb_blocksize != PAGE_SIZE)
+		if (bdev_dax_supported(sb, sb->s_blocksize) < 0)
 			return -EINVAL;
 	}
 
