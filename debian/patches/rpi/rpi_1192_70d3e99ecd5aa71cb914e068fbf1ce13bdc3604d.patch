commit 70d3e99ecd5aa71cb914e068fbf1ce13bdc3604d
Author: Tim Gover <tim.gover@raspberrypi.org>
Date:   Sat Jul 21 20:07:46 2018 +0100

    ASoC: Create a generic Pi Hat WM8804 driver
    
    Reduce the amount of duplicated code by creating a generic driver for
    Pi Hat digi cards using the WM8804 codec.
    
    This replaces the
    Allo DigiOne, Hifiberry Digi/Pro, JustBoom Digi and IQAudIO Digi
    dedicate soundcard drivers with a generic driver.
    
    There are no significant changes to the runtime behavior of the drivers
    and end users should not have to change any configuration settings
    after upgrading.
    
    Minor changes
    * Check the return value of snd_soc_component_update_bits
    * Added some pr_debug tracing
    * Various checkpatch tidyups
    * Updated allodigi-one to use use 128FS at > 96 Khz. This appears to
      be an omission in the original driver code so followed the Hifiberry
      DAC driver approach.

diff --git a/sound/soc/bcm/Kconfig b/sound/soc/bcm/Kconfig
index fb09789a7a70..6f04346347aa 100644
--- a/sound/soc/bcm/Kconfig
+++ b/sound/soc/bcm/Kconfig
@@ -90,6 +90,7 @@ config SND_BCM2708_SOC_JUSTBOOM_DIGI
 	tristate "Support for JustBoom Digi"
 	depends on SND_BCM2708_SOC_I2S || SND_BCM2835_SOC_I2S
 	select SND_SOC_WM8804
+        select SND_RPI_WM8804_SOUNDCARD
 	help
 	  Say Y or M if you want to add support for JustBoom Digi.
 
@@ -101,11 +102,12 @@ config SND_BCM2708_SOC_IQAUDIO_DAC
 	  Say Y or M if you want to add support for IQaudIO-DAC.
 
 config SND_BCM2708_SOC_IQAUDIO_DIGI
-        tristate "Support for IQAudIO Digi"
-        depends on SND_BCM2708_SOC_I2S || SND_BCM2835_SOC_I2S
-        select SND_SOC_WM8804
-        help
-         Say Y or M if you want to add support for IQAudIO Digital IO board.
+	tristate "Support for IQAudIO Digi"
+	depends on SND_BCM2708_SOC_I2S || SND_BCM2835_SOC_I2S
+	select SND_SOC_WM8804
+	select SND_RPI_WM8804_SOUNDCARD
+	help
+	  Say Y or M if you want to add support for IQAudIO Digital IO board.
 
 config SND_BCM2708_SOC_ADAU1977_ADC
 	tristate "Support for ADAU1977 ADC"
@@ -172,10 +174,11 @@ config SND_BCM2708_SOC_ALLO_BOSS_DAC
 	help
 	  Say Y or M if you want to add support for Allo Boss DAC.
 
-config SND_BCM2708_SOC_ALLO_DIGIONE 
-        tristate "Support for Allo DigiOne"
+config SND_BCM2708_SOC_ALLO_DIGIONE
+	tristate "Support for Allo DigiOne"
 	depends on SND_BCM2708_SOC_I2S || SND_BCM2835_SOC_I2S
-	select SND_SOC_PCM512x_I2C
+	select SND_SOC_WM8804
+	select SND_RPI_WM8804_SOUNDCARD
 	help
 	  Say Y or M if you want to add support for Allo DigiOne.
 
@@ -206,3 +209,9 @@ config SND_RPI_SIMPLE_SOUNDCARD
 	tristate "Support for Raspberry Pi simple soundcards"
 	help
 	  Say Y or M if you want to add support Raspbery Pi simple soundcards
+
+config SND_RPI_WM8804_SOUNDCARD
+	tristate "Support for Raspberry Pi generic WM8804 soundcards"
+	help
+	  Say Y or M if you want to add support for the Raspberry Pi
+          generic driver for WM8804 based soundcards.
diff --git a/sound/soc/bcm/Makefile b/sound/soc/bcm/Makefile
index 734bea249f96..4e33ca87ec7e 100644
--- a/sound/soc/bcm/Makefile
+++ b/sound/soc/bcm/Makefile
@@ -13,13 +13,10 @@ snd-soc-googlevoicehat-codec-objs := googlevoicehat-codec.o
 
 # BCM2708 Machine Support
 snd-soc-hifiberry-dacplus-objs := hifiberry_dacplus.o
-snd-soc-hifiberry-digi-objs := hifiberry_digi.o
 snd-soc-justboom-dac-objs := justboom-dac.o
-snd-soc-justboom-digi-objs := justboom-digi.o
 snd-soc-rpi-cirrus-objs := rpi-cirrus.o
 snd-soc-rpi-proto-objs := rpi-proto.o
 snd-soc-iqaudio-dac-objs := iqaudio-dac.o
-snd-soc-iqaudio-digi-objs := iqaudio_digi.o
 snd-soc-audioinjector-pi-soundcard-objs := audioinjector-pi-soundcard.o
 snd-soc-audioinjector-octo-soundcard-objs := audioinjector-octo-soundcard.o
 snd-soc-digidac1-soundcard-objs := digidac1-soundcard.o
@@ -28,21 +25,18 @@ snd-soc-dionaudio-loco-v2-objs := dionaudio_loco-v2.o
 snd-soc-allo-boss-dac-objs := allo-boss-dac.o
 snd-soc-allo-piano-dac-objs := allo-piano-dac.o
 snd-soc-allo-piano-dac-plus-objs := allo-piano-dac-plus.o
-snd-soc-allo-digione-objs := allo-digione.o
 snd-soc-allo-katana-codec-objs := allo-katana-codec.o
 snd-soc-pisound-objs := pisound.o
 snd-soc-fe-pi-audio-objs := fe-pi-audio.o
 snd-soc-rpi-simple-soundcard-objs := rpi-simple-soundcard.o
+snd-soc-rpi-wm8804-soundcard-objs := rpi-wm8804-soundcard.o
 
 obj-$(CONFIG_SND_BCM2708_SOC_GOOGLEVOICEHAT_SOUNDCARD)  += snd-soc-googlevoicehat-codec.o
 obj-$(CONFIG_SND_BCM2708_SOC_HIFIBERRY_DACPLUS) += snd-soc-hifiberry-dacplus.o
-obj-$(CONFIG_SND_BCM2708_SOC_HIFIBERRY_DIGI) += snd-soc-hifiberry-digi.o
 obj-$(CONFIG_SND_BCM2708_SOC_JUSTBOOM_DAC) += snd-soc-justboom-dac.o
-obj-$(CONFIG_SND_BCM2708_SOC_JUSTBOOM_DIGI) += snd-soc-justboom-digi.o
 obj-$(CONFIG_SND_BCM2708_SOC_RPI_CIRRUS) += snd-soc-rpi-cirrus.o
 obj-$(CONFIG_SND_BCM2708_SOC_RPI_PROTO) += snd-soc-rpi-proto.o
 obj-$(CONFIG_SND_BCM2708_SOC_IQAUDIO_DAC) += snd-soc-iqaudio-dac.o
-obj-$(CONFIG_SND_BCM2708_SOC_IQAUDIO_DIGI) += snd-soc-iqaudio-digi.o
 obj-$(CONFIG_SND_AUDIOINJECTOR_PI_SOUNDCARD) += snd-soc-audioinjector-pi-soundcard.o
 obj-$(CONFIG_SND_AUDIOINJECTOR_OCTO_SOUNDCARD) += snd-soc-audioinjector-octo-soundcard.o
 obj-$(CONFIG_SND_DIGIDAC1_SOUNDCARD) += snd-soc-digidac1-soundcard.o
@@ -51,8 +45,8 @@ obj-$(CONFIG_SND_BCM2708_SOC_DIONAUDIO_LOCO_V2) += snd-soc-dionaudio-loco-v2.o
 obj-$(CONFIG_SND_BCM2708_SOC_ALLO_BOSS_DAC) += snd-soc-allo-boss-dac.o
 obj-$(CONFIG_SND_BCM2708_SOC_ALLO_PIANO_DAC) += snd-soc-allo-piano-dac.o
 obj-$(CONFIG_SND_BCM2708_SOC_ALLO_PIANO_DAC_PLUS) += snd-soc-allo-piano-dac-plus.o
-obj-$(CONFIG_SND_BCM2708_SOC_ALLO_DIGIONE) += snd-soc-allo-digione.o
 obj-$(CONFIG_SND_BCM2708_SOC_ALLO_KATANA_DAC) += snd-soc-allo-katana-codec.o
 obj-$(CONFIG_SND_PISOUND) += snd-soc-pisound.o
 obj-$(CONFIG_SND_BCM2708_SOC_FE_PI_AUDIO) += snd-soc-fe-pi-audio.o
 obj-$(CONFIG_SND_RPI_SIMPLE_SOUNDCARD) += snd-soc-rpi-simple-soundcard.o
+obj-$(CONFIG_SND_RPI_WM8804_SOUNDCARD) += snd-soc-rpi-wm8804-soundcard.o
diff --git a/sound/soc/bcm/allo-digione.c b/sound/soc/bcm/allo-digione.c
deleted file mode 100644
index d65b356cae4e..000000000000
--- a/sound/soc/bcm/allo-digione.c
+++ /dev/null
@@ -1,259 +0,0 @@
-/*
- * ASoC Driver for Allo DigiOne
- *
- * Author: Baswaraj <jaikumar@cemsolutions.net>
- *	   Copyright 2017
- * based on code by Daniel Matuschek <info@crazy-audio.com>
- * based on code by Florian Meier <florian.meier@koalo.de>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful, but
- * WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License for more details.
- */
-
-#include <linux/module.h>
-#include <linux/platform_device.h>
-
-#include <sound/core.h>
-#include <sound/pcm.h>
-#include <sound/pcm_params.h>
-#include <sound/soc.h>
-#include <sound/jack.h>
-#include <linux/gpio/consumer.h>
-
-#include "../codecs/wm8804.h"
-
-static short int auto_shutdown_output;
-module_param(auto_shutdown_output, short,
-		S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
-MODULE_PARM_DESC(auto_shutdown_output, "Shutdown SP/DIF output if playback is stopped");
-
-#define CLK_44EN_RATE 22579200UL
-#define CLK_48EN_RATE 24576000UL
-
-static struct gpio_desc *snd_allo_clk44gpio;
-static struct gpio_desc *snd_allo_clk48gpio;
-
-static int samplerate = 44100;
-
-static uint32_t snd_allo_digione_enable_clock(int sample_rate)
-{
-	switch (sample_rate) {
-	case 11025:
-	case 22050:
-	case 44100:
-	case 88200:
-	case 176400:
-		gpiod_set_value_cansleep(snd_allo_clk44gpio, 1);
-		gpiod_set_value_cansleep(snd_allo_clk48gpio, 0);
-		return CLK_44EN_RATE;
-	default:
-		gpiod_set_value_cansleep(snd_allo_clk48gpio, 1);
-		gpiod_set_value_cansleep(snd_allo_clk44gpio, 0);
-		return CLK_48EN_RATE;
-	}
-}
-
-
-static int snd_allo_digione_init(struct snd_soc_pcm_runtime *rtd)
-{
-	struct snd_soc_component *component = rtd->codec_dai->component;
-
-	/* enable TX output */
-	snd_soc_component_update_bits(component, WM8804_PWRDN, 0x4, 0x0);
-
-	return 0;
-}
-
-static int snd_allo_digione_startup(struct snd_pcm_substream *substream)
-{
-	/* turn on digital output */
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct snd_soc_component *component = rtd->codec_dai->component;
-
-	snd_soc_component_update_bits(component, WM8804_PWRDN, 0x3c, 0x00);
-	return 0;
-}
-
-static void snd_allo_digione_shutdown(struct snd_pcm_substream *substream)
-{
-	/* turn off output */
-	if (auto_shutdown_output) {
-		/* turn off output */
-		struct snd_soc_pcm_runtime *rtd = substream->private_data;
-		struct snd_soc_component *component = rtd->codec_dai->component;
-
-		snd_soc_component_update_bits(component, WM8804_PWRDN, 0x3c, 0x3c);
-	}
-}
-
-static int snd_allo_digione_hw_params(struct snd_pcm_substream *substream,
-				       struct snd_pcm_hw_params *params)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct snd_soc_dai *codec_dai = rtd->codec_dai;
-	struct snd_soc_component *component = rtd->codec_dai->component;
-	struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
-
-	int sysclk = 27000000; /* This is fixed on this board */
-
-	long mclk_freq = 0;
-	int mclk_div = 1;
-	int sampling_freq = 1;
-
-	int ret;
-
-	samplerate = params_rate(params);
-	mclk_freq = samplerate * 256;
-	mclk_div = WM8804_MCLKDIV_256FS;
-
-	sysclk = snd_allo_digione_enable_clock(samplerate);
-
-	switch (samplerate) {
-	case 32000:
-		sampling_freq = 0x03;
-		break;
-	case 44100:
-		sampling_freq = 0x00;
-		break;
-	case 48000:
-		sampling_freq = 0x02;
-		break;
-	case 88200:
-		sampling_freq = 0x08;
-		break;
-	case 96000:
-		sampling_freq = 0x0a;
-		break;
-	case 176400:
-		sampling_freq = 0x0c;
-		break;
-	case 192000:
-		sampling_freq = 0x0e;
-		break;
-	default:
-		dev_err(rtd->card->dev,
-		"Failed to set WM8804 SYSCLK, unsupported samplerate %d\n",
-		samplerate);
-	}
-
-	snd_soc_dai_set_clkdiv(codec_dai, WM8804_MCLK_DIV, mclk_div);
-	snd_soc_dai_set_pll(codec_dai, 0, 0, sysclk, mclk_freq);
-
-	ret = snd_soc_dai_set_sysclk(codec_dai, WM8804_TX_CLKSRC_PLL,
-					sysclk, SND_SOC_CLOCK_OUT);
-
-	if (ret < 0) {
-		dev_err(rtd->card->dev,
-		"Failed to set WM8804 SYSCLK: %d\n", ret);
-		return ret;
-	}
-
-	/* Enable TX output */
-	snd_soc_component_update_bits(component, WM8804_PWRDN, 0x4, 0x0);
-
-	/* Power on */
-	snd_soc_component_update_bits(component, WM8804_PWRDN, 0x9, 0);
-
-	/* set sampling frequency status bits */
-	snd_soc_component_update_bits(component, WM8804_SPDTX4, 0x0f, sampling_freq);
-
-	return snd_soc_dai_set_bclk_ratio(cpu_dai, 64);
-}
-
-/* machine stream operations */
-static struct snd_soc_ops snd_allo_digione_ops = {
-	.hw_params	= snd_allo_digione_hw_params,
-	.startup	= snd_allo_digione_startup,
-	.shutdown	= snd_allo_digione_shutdown,
-};
-
-static struct snd_soc_dai_link snd_allo_digione_dai[] = {
-{
-	.name		= "Allo DigiOne",
-	.stream_name	= "Allo DigiOne HiFi",
-	.cpu_dai_name	= "bcm2708-i2s.0",
-	.codec_dai_name	= "wm8804-spdif",
-	.platform_name	= "bcm2708-i2s.0",
-	.codec_name	= "wm8804.1-003b",
-	.dai_fmt	= SND_SOC_DAIFMT_I2S |
-			  SND_SOC_DAIFMT_NB_NF |
-			  SND_SOC_DAIFMT_CBM_CFM,
-	.ops		= &snd_allo_digione_ops,
-	.init		= snd_allo_digione_init,
-},
-};
-
-/* audio machine driver */
-static struct snd_soc_card snd_allo_digione = {
-	.name         = "snd_allo_digione",
-	.driver_name  = "AlloDigiOne",
-	.owner        = THIS_MODULE,
-	.dai_link     = snd_allo_digione_dai,
-	.num_links    = ARRAY_SIZE(snd_allo_digione_dai),
-};
-
-static int snd_allo_digione_probe(struct platform_device *pdev)
-{
-	int ret = 0;
-
-	snd_allo_digione.dev = &pdev->dev;
-
-	if (pdev->dev.of_node) {
-		struct device_node *i2s_node;
-		struct snd_soc_dai_link *dai = &snd_allo_digione_dai[0];
-
-		i2s_node = of_parse_phandle(pdev->dev.of_node,
-				"i2s-controller", 0);
-
-		if (i2s_node) {
-			dai->cpu_dai_name = NULL;
-			dai->cpu_of_node = i2s_node;
-			dai->platform_name = NULL;
-			dai->platform_of_node = i2s_node;
-		}
-
-		snd_allo_clk44gpio =
-			devm_gpiod_get(&pdev->dev, "clock44", GPIOD_OUT_LOW);
-		if (IS_ERR(snd_allo_clk44gpio))
-			dev_err(&pdev->dev, "devm_gpiod_get() failed\n");
-
-		snd_allo_clk48gpio =
-			devm_gpiod_get(&pdev->dev, "clock48", GPIOD_OUT_LOW);
-		if (IS_ERR(snd_allo_clk48gpio))
-			dev_err(&pdev->dev, "devm_gpiod_get() failed\n");
-	}
-
-	ret = devm_snd_soc_register_card(&pdev->dev, &snd_allo_digione);
-	if (ret && ret != -EPROBE_DEFER)
-		dev_err(&pdev->dev, "snd_soc_register_card() failed: %d\n",
-			ret);
-
-	return ret;
-}
-
-static const struct of_device_id snd_allo_digione_of_match[] = {
-	{ .compatible = "allo,allo-digione", },
-	{},
-};
-MODULE_DEVICE_TABLE(of, snd_allo_digione_of_match);
-
-static struct platform_driver snd_allo_digione_driver = {
-	.driver = {
-		.name		= "snd-allo-digione",
-		.owner		= THIS_MODULE,
-		.of_match_table	= snd_allo_digione_of_match,
-	},
-	.probe  = snd_allo_digione_probe,
-};
-
-module_platform_driver(snd_allo_digione_driver);
-
-MODULE_AUTHOR("Baswaraj <jaikumar@cem-solutions.net>");
-MODULE_DESCRIPTION("ASoC Driver for Allo DigiOne");
-MODULE_LICENSE("GPL v2");
diff --git a/sound/soc/bcm/hifiberry_digi.c b/sound/soc/bcm/hifiberry_digi.c
deleted file mode 100644
index 8bbd08a61dbe..000000000000
--- a/sound/soc/bcm/hifiberry_digi.c
+++ /dev/null
@@ -1,270 +0,0 @@
-/*
- * ASoC Driver for HifiBerry Digi
- *
- * Author: Daniel Matuschek <info@crazy-audio.com>
- * based on the HifiBerry DAC driver by Florian Meier <florian.meier@koalo.de>
- *	Copyright 2013
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful, but
- * WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License for more details.
- */
-
-#include <linux/module.h>
-#include <linux/platform_device.h>
-
-#include <sound/core.h>
-#include <sound/pcm.h>
-#include <sound/pcm_params.h>
-#include <sound/soc.h>
-#include <sound/jack.h>
-#include <linux/gpio/consumer.h>
-
-#include "../codecs/wm8804.h"
-
-static short int auto_shutdown_output = 0;
-module_param(auto_shutdown_output, short, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
-MODULE_PARM_DESC(auto_shutdown_output, "Shutdown SP/DIF output if playback is stopped");
-
-#define CLK_44EN_RATE 22579200UL
-#define CLK_48EN_RATE 24576000UL
-
-static bool snd_rpi_hifiberry_is_digipro;
-static struct gpio_desc *snd_rpi_hifiberry_clk44gpio;
-static struct gpio_desc *snd_rpi_hifiberry_clk48gpio;
-
-static int samplerate=44100;
-
-static uint32_t snd_rpi_hifiberry_digi_enable_clock(int sample_rate)
-{
-	switch (sample_rate) {
-	case 11025:
-	case 22050:
-	case 44100:
-	case 88200:
-	case 176400:
-		gpiod_set_value_cansleep(snd_rpi_hifiberry_clk44gpio, 1);
-		gpiod_set_value_cansleep(snd_rpi_hifiberry_clk48gpio, 0);
-		return CLK_44EN_RATE;
-	default:
-		gpiod_set_value_cansleep(snd_rpi_hifiberry_clk48gpio, 1);
-		gpiod_set_value_cansleep(snd_rpi_hifiberry_clk44gpio, 0);
-		return CLK_48EN_RATE;
-	}
-}
-
-
-static int snd_rpi_hifiberry_digi_init(struct snd_soc_pcm_runtime *rtd)
-{
-	struct snd_soc_component *component = rtd->codec_dai->component;
-
-	/* enable TX output */
-	snd_soc_component_update_bits(component, WM8804_PWRDN, 0x4, 0x0);
-
-	/* Initialize Digi+ Pro hardware */
-	if (snd_rpi_hifiberry_is_digipro) {
-		struct snd_soc_dai_link *dai = rtd->dai_link;
-
-		dai->name = "HiFiBerry Digi+ Pro";
-		dai->stream_name = "HiFiBerry Digi+ Pro HiFi";
-	}
-
-	return 0;
-}
-
-static int snd_rpi_hifiberry_digi_startup(struct snd_pcm_substream *substream) {
-	/* turn on digital output */
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct snd_soc_component *component = rtd->codec_dai->component;
-	snd_soc_component_update_bits(component, WM8804_PWRDN, 0x3c, 0x00);
-	return 0;
-}
-
-static void snd_rpi_hifiberry_digi_shutdown(struct snd_pcm_substream *substream) {
-	/* turn off output */
-	if (auto_shutdown_output) {
-		/* turn off output */
-		struct snd_soc_pcm_runtime *rtd = substream->private_data;
-		struct snd_soc_component *component = rtd->codec_dai->component;
-		snd_soc_component_update_bits(component, WM8804_PWRDN, 0x3c, 0x3c);
-	}
-}
-
-
-static int snd_rpi_hifiberry_digi_hw_params(struct snd_pcm_substream *substream,
-				       struct snd_pcm_hw_params *params)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct snd_soc_dai *codec_dai = rtd->codec_dai;
-	struct snd_soc_component *component = codec_dai->component;
-	struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
-
-	int sysclk = 27000000; /* This is fixed on this board */
-
-	long mclk_freq=0;
-	int mclk_div=1;
-	int sampling_freq=1;
-
-	int ret;
-
-	samplerate = params_rate(params);
-
-	if (samplerate<=96000) {
-		mclk_freq=samplerate*256;
-		mclk_div=WM8804_MCLKDIV_256FS;
-	} else {
-		mclk_freq=samplerate*128;
-		mclk_div=WM8804_MCLKDIV_128FS;
-	}
-
-	if (snd_rpi_hifiberry_is_digipro)
-		sysclk = snd_rpi_hifiberry_digi_enable_clock(samplerate);
-	
-	switch (samplerate) {
-		case 32000:
-			sampling_freq=0x03;
-			break;
-		case 44100:
-			sampling_freq=0x00;
-			break;
-		case 48000:
-			sampling_freq=0x02;
-			break;
-		case 88200:
-			sampling_freq=0x08;
-			break;
-		case 96000:
-			sampling_freq=0x0a;
-			break;
-		case 176400:
-			sampling_freq=0x0c;
-			break;
-		case 192000:
-			sampling_freq=0x0e;
-			break;
-		default:
-			dev_err(rtd->card->dev,
-			"Failed to set WM8804 SYSCLK, unsupported samplerate %d\n",
-			samplerate);
-	}
-
-	snd_soc_dai_set_clkdiv(codec_dai, WM8804_MCLK_DIV, mclk_div);
-	snd_soc_dai_set_pll(codec_dai, 0, 0, sysclk, mclk_freq);
-
-	ret = snd_soc_dai_set_sysclk(codec_dai, WM8804_TX_CLKSRC_PLL,
-					sysclk, SND_SOC_CLOCK_OUT);
-
-	if (ret < 0) {
-		dev_err(rtd->card->dev,
-		"Failed to set WM8804 SYSCLK: %d\n", ret);
-		return ret;
-	}
-
-	/* Enable TX output */
-	snd_soc_component_update_bits(component, WM8804_PWRDN, 0x4, 0x0);
-
-	/* Power on */
-	snd_soc_component_update_bits(component, WM8804_PWRDN, 0x9, 0);
-
-	/* set sampling frequency status bits */
-	snd_soc_component_update_bits(component, WM8804_SPDTX4, 0x0f, sampling_freq);
-
-	return snd_soc_dai_set_bclk_ratio(cpu_dai,64);
-}
-
-/* machine stream operations */
-static struct snd_soc_ops snd_rpi_hifiberry_digi_ops = {
-	.hw_params = snd_rpi_hifiberry_digi_hw_params,
-        .startup = snd_rpi_hifiberry_digi_startup,
-        .shutdown = snd_rpi_hifiberry_digi_shutdown,
-};
-
-static struct snd_soc_dai_link snd_rpi_hifiberry_digi_dai[] = {
-{
-	.name		= "HifiBerry Digi",
-	.stream_name	= "HifiBerry Digi HiFi",
-	.cpu_dai_name	= "bcm2708-i2s.0",
-	.codec_dai_name	= "wm8804-spdif",
-	.platform_name	= "bcm2708-i2s.0",
-	.codec_name	= "wm8804.1-003b",
-	.dai_fmt	= SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
-				SND_SOC_DAIFMT_CBM_CFM,
-	.ops		= &snd_rpi_hifiberry_digi_ops,
-	.init		= snd_rpi_hifiberry_digi_init,
-},
-};
-
-/* audio machine driver */
-static struct snd_soc_card snd_rpi_hifiberry_digi = {
-	.name         = "snd_rpi_hifiberry_digi",
-	.driver_name  = "HifiberryDigi",
-	.owner        = THIS_MODULE,
-	.dai_link     = snd_rpi_hifiberry_digi_dai,
-	.num_links    = ARRAY_SIZE(snd_rpi_hifiberry_digi_dai),
-};
-
-static int snd_rpi_hifiberry_digi_probe(struct platform_device *pdev)
-{
-	int ret = 0;
-
-	snd_rpi_hifiberry_digi.dev = &pdev->dev;
-
-	if (pdev->dev.of_node) {
-	    struct device_node *i2s_node;
-	    struct snd_soc_dai_link *dai = &snd_rpi_hifiberry_digi_dai[0];
-	    i2s_node = of_parse_phandle(pdev->dev.of_node,
-					"i2s-controller", 0);
-
-	    if (i2s_node) {
-		dai->cpu_dai_name = NULL;
-		dai->cpu_of_node = i2s_node;
-		dai->platform_name = NULL;
-		dai->platform_of_node = i2s_node;
-	    }
-
-	    snd_rpi_hifiberry_is_digipro = 1;
-
-	    snd_rpi_hifiberry_clk44gpio =
-		devm_gpiod_get(&pdev->dev, "clock44", GPIOD_OUT_LOW);
-	    if (IS_ERR(snd_rpi_hifiberry_clk44gpio))
-		snd_rpi_hifiberry_is_digipro = 0;
-
-	    snd_rpi_hifiberry_clk48gpio =
-		devm_gpiod_get(&pdev->dev, "clock48", GPIOD_OUT_LOW);
-	    if (IS_ERR(snd_rpi_hifiberry_clk48gpio))
-		snd_rpi_hifiberry_is_digipro = 0;
-
-	}
-
-	ret = devm_snd_soc_register_card(&pdev->dev, &snd_rpi_hifiberry_digi);
-	if (ret && ret != -EPROBE_DEFER)
-		dev_err(&pdev->dev, "snd_soc_register_card() failed: %d\n", ret);
-
-	return ret;
-}
-
-static const struct of_device_id snd_rpi_hifiberry_digi_of_match[] = {
-	{ .compatible = "hifiberry,hifiberry-digi", },
-	{},
-};
-MODULE_DEVICE_TABLE(of, snd_rpi_hifiberry_digi_of_match);
-
-static struct platform_driver snd_rpi_hifiberry_digi_driver = {
-	.driver = {
-		.name   = "snd-hifiberry-digi",
-		.owner  = THIS_MODULE,
-		.of_match_table = snd_rpi_hifiberry_digi_of_match,
-	},
-	.probe          = snd_rpi_hifiberry_digi_probe,
-};
-
-module_platform_driver(snd_rpi_hifiberry_digi_driver);
-
-MODULE_AUTHOR("Daniel Matuschek <info@crazy-audio.com>");
-MODULE_DESCRIPTION("ASoC Driver for HifiBerry Digi");
-MODULE_LICENSE("GPL v2");
diff --git a/sound/soc/bcm/iqaudio_digi.c b/sound/soc/bcm/iqaudio_digi.c
deleted file mode 100644
index 3d5d85a33654..000000000000
--- a/sound/soc/bcm/iqaudio_digi.c
+++ /dev/null
@@ -1,233 +0,0 @@
-/*
- * ASoC Driver for IQAudIO WM8804 Digi
- *
- * Author: Daniel Matuschek <info@crazy-audio.com>
- * based on the HifiBerry DAC driver by Florian Meier <florian.meier@koalo.de>
- *	Copyright 2013
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful, but
- * WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License for more details.
- */
-
-#include <linux/module.h>
-#include <linux/platform_device.h>
-
-#include <sound/core.h>
-#include <sound/pcm.h>
-#include <sound/pcm_params.h>
-#include <sound/soc.h>
-#include <sound/jack.h>
-
-#include "../codecs/wm8804.h"
-
-static short int auto_shutdown_output;
-module_param(auto_shutdown_output, short,
-	      S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
-MODULE_PARM_DESC(auto_shutdown_output, "Shutdown SP/DIF output if playback is stopped");
-
-static int snd_rpi_iqaudio_digi_init(struct snd_soc_pcm_runtime *rtd)
-{
-	struct snd_soc_component *component = rtd->codec_dai->component;
-
-	/* enable TX output */
-	snd_soc_component_update_bits(component, WM8804_PWRDN, 0x4, 0x0);
-
-	return 0;
-}
-
-static int snd_rpi_iqaudio_digi_startup(struct snd_pcm_substream *substream)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct snd_soc_component *component = rtd->codec_dai->component;
-
-	/* turn on digital output */
-	snd_soc_component_update_bits(component, WM8804_PWRDN, 0x3c, 0x00);
-
-	return 0;
-}
-
-static void snd_rpi_iqaudio_digi_shutdown(struct snd_pcm_substream *substream)
-{
-	if (auto_shutdown_output) {
-		struct snd_soc_pcm_runtime *rtd = substream->private_data;
-		struct snd_soc_component *component = rtd->codec_dai->component;
-
-		/* turn off digital output */
-		snd_soc_component_update_bits(component, WM8804_PWRDN, 0x3c, 0x3c);
-	}
-}
-
-
-static int snd_rpi_iqaudio_digi_hw_params(struct snd_pcm_substream *substream,
-	struct snd_pcm_hw_params *params)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct snd_soc_dai *codec_dai = rtd->codec_dai;
-	struct snd_soc_component *component = rtd->codec_dai->component;
-	struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
-
-	int sysclk = 27000000; /* This is fixed on this board */
-
-	long mclk_freq = 0;
-	int mclk_div = 1;
-	int sampling_freq = 1;
-
-	int ret;
-
-	int samplerate = params_rate(params);
-
-	if (samplerate <= 96000) {
-		mclk_freq = samplerate * 256;
-		mclk_div = WM8804_MCLKDIV_256FS;
-	} else {
-		mclk_freq = samplerate * 128;
-		mclk_div = WM8804_MCLKDIV_128FS;
-	}
-
-	switch (samplerate) {
-	case 32000:
-		sampling_freq = 0x03;
-		break;
-	case 44100:
-		sampling_freq = 0x00;
-		break;
-	case 48000:
-		sampling_freq = 0x02;
-		break;
-	case 88200:
-		sampling_freq = 0x08;
-		break;
-	case 96000:
-		sampling_freq = 0x0a;
-		break;
-	case 176400:
-		sampling_freq = 0x0c;
-		break;
-	case 192000:
-		sampling_freq = 0x0e;
-		break;
-	default:
-		dev_err(rtd->card->dev, "Failed to set WM8804 SYSCLK, unsupported samplerate %d\n",
-			samplerate);
-	}
-
-	snd_soc_dai_set_clkdiv(codec_dai, WM8804_MCLK_DIV, mclk_div);
-	snd_soc_dai_set_pll(codec_dai, 0, 0, sysclk, mclk_freq);
-
-	ret = snd_soc_dai_set_sysclk(codec_dai, WM8804_TX_CLKSRC_PLL,
-					sysclk, SND_SOC_CLOCK_OUT);
-	if (ret < 0) {
-		dev_err(rtd->card->dev, "Failed to set WM8804 SYSCLK: %d\n", ret);
-		return ret;
-	}
-
-	/* Enable TX output */
-	snd_soc_component_update_bits(component, WM8804_PWRDN, 0x4, 0x0);
-
-	/* Power on */
-	snd_soc_component_update_bits(component, WM8804_PWRDN, 0x9, 0);
-
-	/* set sampling frequency status bits */
-	snd_soc_component_update_bits(component, WM8804_SPDTX4, 0x0f, sampling_freq);
-
-	return snd_soc_dai_set_bclk_ratio(cpu_dai, 64);
-}
-
-/* machine stream operations */
-static struct snd_soc_ops snd_rpi_iqaudio_digi_ops = {
-	.hw_params	= snd_rpi_iqaudio_digi_hw_params,
-	.startup	= snd_rpi_iqaudio_digi_startup,
-	.shutdown	= snd_rpi_iqaudio_digi_shutdown,
-};
-
-static struct snd_soc_dai_link snd_rpi_iqaudio_digi_dai[] = {
-{
-	.name		= "IQAudIO Digi",
-	.stream_name	= "IQAudIO Digi HiFi",
-	.cpu_dai_name	= "bcm2708-i2s.0",
-	.codec_dai_name	= "wm8804-spdif",
-	.platform_name	= "bcm2708-i2s.0",
-	.codec_name	= "wm8804.1-003b",
-	.dai_fmt	= SND_SOC_DAIFMT_I2S |
-			  SND_SOC_DAIFMT_NB_NF |
-			  SND_SOC_DAIFMT_CBM_CFM,
-	.ops		= &snd_rpi_iqaudio_digi_ops,
-	.init		= snd_rpi_iqaudio_digi_init,
-},
-};
-
-/* audio machine driver */
-static struct snd_soc_card snd_rpi_iqaudio_digi = {
-	.name		= "IQAudIODigi",
-	.owner		= THIS_MODULE,
-	.dai_link	= snd_rpi_iqaudio_digi_dai,
-	.num_links	= ARRAY_SIZE(snd_rpi_iqaudio_digi_dai),
-};
-
-static int snd_rpi_iqaudio_digi_probe(struct platform_device *pdev)
-{
-	struct snd_soc_card *card = &snd_rpi_iqaudio_digi;
-	char *prefix = "wm8804-digi,";
-	char prop[128];
-	struct device_node *np;
-	int ret = 0;
-
-	snd_rpi_iqaudio_digi.dev = &pdev->dev;
-
-	np = pdev->dev.of_node;
-	if (np) {
-		struct snd_soc_dai_link *dai = &snd_rpi_iqaudio_digi_dai[0];
-		struct device_node *i2s_node;
-
-		i2s_node = of_parse_phandle(np, "i2s-controller", 0);
-		if (i2s_node) {
-			dai->cpu_dai_name = NULL;
-			dai->cpu_of_node = i2s_node;
-			dai->platform_name = NULL;
-			dai->platform_of_node = i2s_node;
-		}
-
-		snprintf(prop, sizeof(prop), "%scard-name", prefix);
-		of_property_read_string(np, prop, &card->name);
-
-		snprintf(prop, sizeof(prop), "%sdai-name", prefix);
-		of_property_read_string(np, prop, &dai->name);
-
-		snprintf(prop, sizeof(prop), "%sdai-stream-name", prefix);
-		of_property_read_string(np, prop, &dai->stream_name);
-	}
-
-	ret = devm_snd_soc_register_card(&pdev->dev, card);
-	if (ret && ret != -EPROBE_DEFER)
-		dev_err(&pdev->dev, "snd_soc_register_card() failed: %d\n",
-			ret);
-
-	return ret;
-}
-
-static const struct of_device_id snd_rpi_iqaudio_digi_of_match[] = {
-	{ .compatible = "iqaudio,wm8804-digi", },
-	{},
-};
-MODULE_DEVICE_TABLE(of, snd_rpi_iqaudio_digi_of_match);
-
-static struct platform_driver snd_rpi_iqaudio_digi_driver = {
-	.driver = {
-		.name		= "IQAudIODigi",
-		.owner		= THIS_MODULE,
-		.of_match_table	= snd_rpi_iqaudio_digi_of_match,
-	},
-	.probe  = snd_rpi_iqaudio_digi_probe,
-};
-
-module_platform_driver(snd_rpi_iqaudio_digi_driver);
-
-MODULE_AUTHOR("Daniel Matuschek <info@crazy-audio.com>");
-MODULE_DESCRIPTION("ASoC Driver for IQAudIO WM8804 Digi");
-MODULE_LICENSE("GPL v2");
diff --git a/sound/soc/bcm/justboom-digi.c b/sound/soc/bcm/justboom-digi.c
deleted file mode 100644
index 44527d1f9229..000000000000
--- a/sound/soc/bcm/justboom-digi.c
+++ /dev/null
@@ -1,210 +0,0 @@
-/*
- * ASoC Driver for JustBoom Raspberry Pi Digi HAT Sound Card
- *
- * Author:	Milan Neskovic
- *		Copyright 2016
- *		based on code by Daniel Matuschek <info@crazy-audio.com>
- *		based on code by Florian Meier <florian.meier@koalo.de>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * version 2 as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful, but
- * WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License for more details.
- */
-
-#include <linux/module.h>
-#include <linux/platform_device.h>
-
-#include <sound/core.h>
-#include <sound/pcm.h>
-#include <sound/pcm_params.h>
-#include <sound/soc.h>
-#include <sound/jack.h>
-
-#include "../codecs/wm8804.h"
-
-static int snd_rpi_justboom_digi_init(struct snd_soc_pcm_runtime *rtd)
-{
-	struct snd_soc_component *component = rtd->codec_dai->component;
-
-	/* enable TX output */
-	snd_soc_component_update_bits(component, WM8804_PWRDN, 0x4, 0x0);
-
-	return 0;
-}
-
-static int snd_rpi_justboom_digi_startup(struct snd_pcm_substream *substream) {
-	/* turn on digital output */
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct snd_soc_component *component = rtd->codec_dai->component;
-	snd_soc_component_update_bits(component, WM8804_PWRDN, 0x3c, 0x00);
-	return 0;
-}
-
-static void snd_rpi_justboom_digi_shutdown(struct snd_pcm_substream *substream) {
-	/* turn off output */
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct snd_soc_component *component = rtd->codec_dai->component;
-	snd_soc_component_update_bits(component, WM8804_PWRDN, 0x3c, 0x3c);
-}
-
-static int snd_rpi_justboom_digi_hw_params(struct snd_pcm_substream *substream,
-				       struct snd_pcm_hw_params *params)
-{
-	struct snd_soc_pcm_runtime *rtd = substream->private_data;
-	struct snd_soc_dai *codec_dai = rtd->codec_dai;
-	struct snd_soc_component *component = rtd->codec_dai->component;
-	struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
-
-	int sysclk = 27000000; /* This is fixed on this board */
-
-	long mclk_freq=0;
-	int mclk_div=1;
-	int sampling_freq=1;
-
-	int ret;
-
-	int samplerate = params_rate(params);
-
-	if (samplerate<=96000) {
-		mclk_freq=samplerate*256;
-		mclk_div=WM8804_MCLKDIV_256FS;
-	} else {
-		mclk_freq=samplerate*128;
-		mclk_div=WM8804_MCLKDIV_128FS;
-	}
-
-	switch (samplerate) {
-		case 32000:
-			sampling_freq=0x03;
-			break;
-		case 44100:
-			sampling_freq=0x00;
-			break;
-		case 48000:
-			sampling_freq=0x02;
-			break;
-		case 88200:
-			sampling_freq=0x08;
-			break;
-		case 96000:
-			sampling_freq=0x0a;
-			break;
-		case 176400:
-			sampling_freq=0x0c;
-			break;
-		case 192000:
-			sampling_freq=0x0e;
-			break;
-		default:
-			dev_err(rtd->card->dev,
-			"Failed to set WM8804 SYSCLK, unsupported samplerate %d\n",
-			samplerate);
-	}
-
-	snd_soc_dai_set_clkdiv(codec_dai, WM8804_MCLK_DIV, mclk_div);
-	snd_soc_dai_set_pll(codec_dai, 0, 0, sysclk, mclk_freq);
-
-	ret = snd_soc_dai_set_sysclk(codec_dai, WM8804_TX_CLKSRC_PLL,
-					sysclk, SND_SOC_CLOCK_OUT);
-	if (ret < 0) {
-		dev_err(rtd->card->dev,
-		"Failed to set WM8804 SYSCLK: %d\n", ret);
-		return ret;
-	}
-
-	/* Enable TX output */
-	snd_soc_component_update_bits(component, WM8804_PWRDN, 0x4, 0x0);
-
-	/* Power on */
-	snd_soc_component_update_bits(component, WM8804_PWRDN, 0x9, 0);
-
-	/* set sampling frequency status bits */
-	snd_soc_component_update_bits(component, WM8804_SPDTX4, 0x0f, sampling_freq);
-
-	return snd_soc_dai_set_bclk_ratio(cpu_dai,64);
-}
-
-/* machine stream operations */
-static struct snd_soc_ops snd_rpi_justboom_digi_ops = {
-	.hw_params = snd_rpi_justboom_digi_hw_params,
-        .startup = snd_rpi_justboom_digi_startup,
-        .shutdown = snd_rpi_justboom_digi_shutdown,
-};
-
-static struct snd_soc_dai_link snd_rpi_justboom_digi_dai[] = {
-{
-	.name		= "JustBoom Digi",
-	.stream_name	= "JustBoom Digi HiFi",
-	.cpu_dai_name	= "bcm2708-i2s.0",
-	.codec_dai_name	= "wm8804-spdif",
-	.platform_name	= "bcm2708-i2s.0",
-	.codec_name	= "wm8804.1-003b",
-	.dai_fmt	= SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
-				SND_SOC_DAIFMT_CBM_CFM,
-	.ops		= &snd_rpi_justboom_digi_ops,
-	.init		= snd_rpi_justboom_digi_init,
-},
-};
-
-/* audio machine driver */
-static struct snd_soc_card snd_rpi_justboom_digi = {
-	.name         = "snd_rpi_justboom_digi",
-	.driver_name  = "JustBoomDigi",
-	.owner        = THIS_MODULE,
-	.dai_link     = snd_rpi_justboom_digi_dai,
-	.num_links    = ARRAY_SIZE(snd_rpi_justboom_digi_dai),
-};
-
-static int snd_rpi_justboom_digi_probe(struct platform_device *pdev)
-{
-	int ret = 0;
-
-	snd_rpi_justboom_digi.dev = &pdev->dev;
-
-	if (pdev->dev.of_node) {
-	    struct device_node *i2s_node;
-	    struct snd_soc_dai_link *dai = &snd_rpi_justboom_digi_dai[0];
-	    i2s_node = of_parse_phandle(pdev->dev.of_node,
-					"i2s-controller", 0);
-
-	    if (i2s_node) {
-			dai->cpu_dai_name = NULL;
-			dai->cpu_of_node = i2s_node;
-			dai->platform_name = NULL;
-			dai->platform_of_node = i2s_node;
-	    }
-	}
-
-	ret = devm_snd_soc_register_card(&pdev->dev, &snd_rpi_justboom_digi);
-	if (ret && ret != -EPROBE_DEFER)
-		dev_err(&pdev->dev,
-			"snd_soc_register_card() failed: %d\n", ret);
-
-	return ret;
-}
-
-static const struct of_device_id snd_rpi_justboom_digi_of_match[] = {
-	{ .compatible = "justboom,justboom-digi", },
-	{},
-};
-MODULE_DEVICE_TABLE(of, snd_rpi_justboom_digi_of_match);
-
-static struct platform_driver snd_rpi_justboom_digi_driver = {
-	.driver = {
-		.name   = "snd-rpi-justboom-digi",
-		.owner  = THIS_MODULE,
-		.of_match_table = snd_rpi_justboom_digi_of_match,
-	},
-	.probe          = snd_rpi_justboom_digi_probe,
-};
-
-module_platform_driver(snd_rpi_justboom_digi_driver);
-
-MODULE_AUTHOR("Milan Neskovic <info@justboom.co>");
-MODULE_DESCRIPTION("ASoC Driver for JustBoom PI Digi HAT Sound Card");
-MODULE_LICENSE("GPL v2");
diff --git a/sound/soc/bcm/rpi-wm8804-soundcard.c b/sound/soc/bcm/rpi-wm8804-soundcard.c
new file mode 100644
index 000000000000..50daaed73786
--- /dev/null
+++ b/sound/soc/bcm/rpi-wm8804-soundcard.c
@@ -0,0 +1,428 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * rpi--wm8804.c -- ALSA SoC Raspberry Pi soundcard.
+ *
+ * Copyright (C) 2018 Raspberry Pi.
+ *
+ * Authors: Tim Gover <tim.gover@raspberrypi.org>
+ *
+ * Generic driver for Pi Hat WM8804 digi sounds cards
+ *
+ * Based upon code from:
+ * justboom-digi.c
+ * by Milan Neskovic <info@justboom.co>
+ *
+ * iqaudio_digi.c
+ * by Daniel Matuschek <info@crazy-audio.com>
+ *
+ * allo-digione.c
+ * by Baswaraj <jaikumar@cem-solutions.net>
+ *
+ * hifiberry-digi.c
+ * Daniel Matuschek <info@crazy-audio.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ */
+
+#include <linux/gpio/consumer.h>
+#include <linux/platform_device.h>
+#include <linux/module.h>
+
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+
+#include "../codecs/wm8804.h"
+
+struct wm8804_clk_cfg {
+	unsigned int sysclk_freq;
+	unsigned int mclk_freq;
+	unsigned int mclk_div;
+};
+
+/* Parameters for generic functions */
+struct snd_rpi_wm8804_drvdata {
+	/* Required - pointer to the DAI structure */
+	struct snd_soc_dai_link *dai;
+	/* Required - snd_soc_card name */
+	const char *card_name;
+	/* Optional- Overrides the module paramter */
+	unsigned short auto_shutdown_output;
+	/* Optional DT node names if card info is defined in DT */
+	const char *card_name_dt;
+	const char *dai_name_dt;
+	const char *dai_stream_name_dt;
+	/* Optional probe extension - called prior to register_card */
+	int (*probe)(struct platform_device *pdev);
+};
+
+static short int auto_shutdown_output;
+module_param(auto_shutdown_output, short, 0660);
+MODULE_PARM_DESC(auto_shutdown_output, "Shutdown SP/DIF output if playback is stopped");
+
+static struct gpio_desc *snd_clk44gpio;
+static struct gpio_desc *snd_clk48gpio;
+
+#define CLK_44EN_RATE 22579200UL
+#define CLK_48EN_RATE 24576000UL
+
+static int snd_rpi_wm8804_init(struct snd_soc_pcm_runtime *rtd)
+{
+	struct snd_soc_component *component = rtd->codec_dai->component;
+	int rc;
+
+	pr_debug("%s\n", __func__);
+
+	rc = snd_soc_component_update_bits(component, WM8804_PWRDN, 0x4, 0x0);
+	return rc < 0 ? rc : 0;
+}
+
+static int snd_rpi_wm8804_digi_startup(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_component *component = rtd->codec_dai->component;
+	int rc;
+
+	pr_debug("%s\n", __func__);
+
+	rc = snd_soc_component_update_bits(component, WM8804_PWRDN, 0x3c, 0x00);
+	return rc < 0 ? rc : 0;
+}
+
+static void snd_rpi_wm8804_digi_shutdown(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_component *component = rtd->codec_dai->component;
+
+	pr_debug("%s %d\n", __func__, auto_shutdown_output);
+
+	if (auto_shutdown_output)
+		snd_soc_component_update_bits(component, WM8804_PWRDN,
+				0x3c, 0x3c);
+}
+
+static unsigned int snd_rpi_wm8804_enable_clock(unsigned int samplerate)
+{
+	switch (samplerate) {
+	case 11025:
+	case 22050:
+	case 44100:
+	case 88200:
+	case 176400:
+		gpiod_set_value_cansleep(snd_clk44gpio, 1);
+		gpiod_set_value_cansleep(snd_clk48gpio, 0);
+		return CLK_44EN_RATE;
+	default:
+		gpiod_set_value_cansleep(snd_clk48gpio, 1);
+		gpiod_set_value_cansleep(snd_clk44gpio, 0);
+		return CLK_48EN_RATE;
+	}
+}
+
+static void snd_rpi_wm8804_clk_cfg(unsigned int samplerate,
+		struct wm8804_clk_cfg *clk_cfg)
+{
+	clk_cfg->mclk_freq = 0;
+	clk_cfg->mclk_div = 1;
+	clk_cfg->sysclk_freq = 27000000;
+
+	if (samplerate <= 96000) {
+		clk_cfg->mclk_freq = samplerate * 256;
+		clk_cfg->mclk_div = WM8804_MCLKDIV_256FS;
+	} else {
+		clk_cfg->mclk_freq = samplerate * 128;
+		clk_cfg->mclk_div = WM8804_MCLKDIV_128FS;
+	}
+
+	if (!(IS_ERR(snd_clk44gpio) || IS_ERR(snd_clk48gpio)))
+		clk_cfg->sysclk_freq = snd_rpi_wm8804_enable_clock(samplerate);
+}
+
+static int snd_rpi_wm8804_hw_params(struct snd_pcm_substream *substream,
+		struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_dai *codec_dai = rtd->codec_dai;
+	struct snd_soc_component *component = rtd->codec_dai->component;
+	struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+	int sampling_freq = 1;
+	int ret;
+	struct wm8804_clk_cfg clk_cfg;
+	int samplerate = params_rate(params);
+
+	snd_rpi_wm8804_clk_cfg(samplerate, &clk_cfg);
+
+	pr_debug("%s samplerate: %d mclk_freq: %u mclk_div: %u sysclk: %u\n",
+			__func__, samplerate, clk_cfg.mclk_freq,
+			clk_cfg.mclk_div, clk_cfg.sysclk_freq);
+
+	switch (samplerate) {
+	case 32000:
+		sampling_freq = 0x03;
+		break;
+	case 44100:
+		sampling_freq = 0x00;
+		break;
+	case 48000:
+		sampling_freq = 0x02;
+		break;
+	case 88200:
+		sampling_freq = 0x08;
+		break;
+	case 96000:
+		sampling_freq = 0x0a;
+		break;
+	case 176400:
+		sampling_freq = 0x0c;
+		break;
+	case 192000:
+		sampling_freq = 0x0e;
+		break;
+	default:
+		dev_err(rtd->card->dev,
+		"Failed to set WM8804 SYSCLK, unsupported samplerate %d\n",
+		samplerate);
+	}
+
+	snd_soc_dai_set_clkdiv(codec_dai, WM8804_MCLK_DIV, clk_cfg.mclk_div);
+	snd_soc_dai_set_pll(codec_dai, 0, 0,
+			clk_cfg.sysclk_freq, clk_cfg.mclk_freq);
+
+	ret = snd_soc_dai_set_sysclk(codec_dai, WM8804_TX_CLKSRC_PLL,
+			clk_cfg.sysclk_freq, SND_SOC_CLOCK_OUT);
+	if (ret < 0) {
+		dev_err(rtd->card->dev,
+		"Failed to set WM8804 SYSCLK: %d\n", ret);
+		return ret;
+	}
+
+	/* Enable TX output */
+	snd_soc_component_update_bits(component, WM8804_PWRDN, 0x4, 0x0);
+
+	/* Power on */
+	snd_soc_component_update_bits(component, WM8804_PWRDN, 0x9, 0);
+
+	/* set sampling frequency status bits */
+	snd_soc_component_update_bits(component, WM8804_SPDTX4, 0x0f,
+			sampling_freq);
+
+	return snd_soc_dai_set_bclk_ratio(cpu_dai, 64);
+}
+
+static struct snd_soc_ops snd_rpi_wm8804_ops = {
+	.hw_params = snd_rpi_wm8804_hw_params,
+	.startup   = snd_rpi_wm8804_digi_startup,
+	.shutdown  = snd_rpi_wm8804_digi_shutdown,
+};
+
+static struct snd_soc_dai_link snd_justboom_digi_dai[] = {
+{
+	.name        = "JustBoom Digi",
+	.stream_name = "JustBoom Digi HiFi",
+},
+};
+
+static struct snd_rpi_wm8804_drvdata drvdata_justboom_digi = {
+	.card_name            = "snd_rpi_justboom_digi",
+	.dai                  = snd_justboom_digi_dai,
+	.auto_shutdown_output = 1,
+};
+
+static struct snd_soc_dai_link snd_iqaudio_digi_dai[] = {
+{
+	.name        = "IQAudIO Digi",
+	.stream_name = "IQAudIO Digi HiFi",
+},
+};
+
+static struct snd_rpi_wm8804_drvdata drvdata_iqaudio_digi = {
+	.card_name          = "IQAudIODigi",
+	.dai                = snd_iqaudio_digi_dai,
+	.card_name_dt       = "wm8804-digi,card-name",
+	.dai_name_dt        = "wm8804-digi,dai-name",
+	.dai_stream_name_dt = "wm8804-digi,dai-stream-name",
+};
+
+static int snd_allo_digione_probe(struct platform_device *pdev)
+{
+	pr_debug("%s\n", __func__);
+
+	if (IS_ERR(snd_clk44gpio) || IS_ERR(snd_clk48gpio)) {
+		dev_err(&pdev->dev, "devm_gpiod_get() failed\n");
+		return -EINVAL;
+	}
+	return 0;
+}
+
+static struct snd_soc_dai_link snd_allo_digione_dai[] = {
+{
+	.name        = "Allo DigiOne",
+	.stream_name = "Allo DigiOne HiFi",
+},
+};
+
+static struct snd_rpi_wm8804_drvdata drvdata_allo_digione = {
+	.card_name = "snd_allo_digione",
+	.dai       = snd_allo_digione_dai,
+	.probe     = snd_allo_digione_probe,
+};
+
+static struct snd_soc_dai_link snd_hifiberry_digi_dai[] = {
+{
+	.name        = "HifiBerry Digi",
+	.stream_name = "HifiBerry Digi HiFi",
+},
+};
+
+static int snd_hifiberry_digi_probe(struct platform_device *pdev)
+{
+	pr_debug("%s\n", __func__);
+
+	if (IS_ERR(snd_clk44gpio) || IS_ERR(snd_clk48gpio))
+		return 0;
+
+	snd_hifiberry_digi_dai->name = "HiFiBerry Digi+ Pro";
+	snd_hifiberry_digi_dai->stream_name = "HiFiBerry Digi+ Pro HiFi";
+	return 0;
+}
+
+static struct snd_rpi_wm8804_drvdata drvdata_hifiberry_digi = {
+	.card_name = "snd_rpi_hifiberry_digi",
+	.dai       = snd_hifiberry_digi_dai,
+	.probe     = snd_hifiberry_digi_probe,
+};
+
+static const struct of_device_id snd_rpi_wm8804_of_match[] = {
+	{ .compatible = "justboom,justboom-digi",
+		.data = (void *) &drvdata_justboom_digi },
+	{ .compatible = "iqaudio,wm8804-digi",
+		.data = (void *) &drvdata_iqaudio_digi },
+	{ .compatible = "allo,allo-digione",
+		.data = (void *) &drvdata_allo_digione },
+	{ .compatible = "hifiberry,hifiberry-digi",
+		.data = (void *) &drvdata_hifiberry_digi },
+	{},
+};
+
+static struct snd_soc_card snd_rpi_wm8804 = {
+	.driver_name  = "RPI WM8804 soundcard",
+	.owner        = THIS_MODULE,
+	.dai_link     = NULL,
+	.num_links    = 1,
+};
+
+static int snd_rpi_wm8804_probe(struct platform_device *pdev)
+{
+	int ret = 0;
+	const struct of_device_id *of_id;
+
+	snd_rpi_wm8804.dev = &pdev->dev;
+	of_id = of_match_node(snd_rpi_wm8804_of_match, pdev->dev.of_node);
+
+	if (pdev->dev.of_node && of_id->data) {
+		struct device_node *i2s_node;
+		struct snd_rpi_wm8804_drvdata *drvdata =
+			(struct snd_rpi_wm8804_drvdata *) of_id->data;
+		struct snd_soc_dai_link *dai = drvdata->dai;
+
+		snd_soc_card_set_drvdata(&snd_rpi_wm8804, drvdata);
+
+		if (!dai->init)
+			dai->init = snd_rpi_wm8804_init;
+		if (!dai->ops)
+			dai->ops = &snd_rpi_wm8804_ops;
+		if (!dai->codec_dai_name)
+			dai->codec_dai_name = "wm8804-spdif";
+		if (!dai->codec_name)
+			dai->codec_name = "wm8804.1-003b";
+		if (!dai->dai_fmt)
+			dai->dai_fmt = SND_SOC_DAIFMT_I2S |
+				SND_SOC_DAIFMT_NB_NF |
+				SND_SOC_DAIFMT_CBM_CFM;
+
+		if (drvdata->auto_shutdown_output)
+			auto_shutdown_output = 1;
+
+		snd_rpi_wm8804.dai_link = dai;
+		i2s_node = of_parse_phandle(pdev->dev.of_node,
+				"i2s-controller", 0);
+		if (!i2s_node) {
+			pr_err("Failed to find i2s-controller DT node\n");
+			return -ENODEV;
+		}
+
+		snd_rpi_wm8804.name = drvdata->card_name;
+
+		/* If requested by in drvdata get card & DAI names from DT */
+		if (drvdata->card_name_dt)
+			of_property_read_string(i2s_node,
+					drvdata->card_name_dt,
+					&snd_rpi_wm8804.name);
+
+		if (drvdata->dai_name_dt)
+			of_property_read_string(i2s_node,
+					drvdata->dai_name_dt,
+					&dai->name);
+
+		if (drvdata->dai_stream_name_dt)
+			of_property_read_string(i2s_node,
+					drvdata->dai_stream_name_dt,
+					&dai->stream_name);
+
+		dai->cpu_of_node = i2s_node;
+		dai->platform_of_node = i2s_node;
+
+		/*
+		 * clk44gpio and clk48gpio are not required by all cards so
+		 * don't check the error status.
+		 */
+		snd_clk44gpio =
+			devm_gpiod_get(&pdev->dev, "clock44", GPIOD_OUT_LOW);
+
+		snd_clk48gpio =
+			devm_gpiod_get(&pdev->dev, "clock48", GPIOD_OUT_LOW);
+
+		if (drvdata->probe) {
+			ret = drvdata->probe(pdev);
+			if (ret < 0) {
+				dev_err(&pdev->dev, "Custom probe failed %d\n",
+						ret);
+				return ret;
+			}
+		}
+
+		pr_debug("%s card: %s dai: %s stream: %s\n", __func__,
+				snd_rpi_wm8804.name,
+				dai->name, dai->stream_name);
+	}
+
+	ret = devm_snd_soc_register_card(&pdev->dev, &snd_rpi_wm8804);
+	if (ret && ret != -EPROBE_DEFER)
+		dev_err(&pdev->dev, "Failed to register card %d\n", ret);
+
+	return ret;
+}
+
+static struct platform_driver snd_rpi_wm8804_driver = {
+	.driver = {
+		.name           = "snd-rpi-wm8804",
+		.owner          = THIS_MODULE,
+		.of_match_table = snd_rpi_wm8804_of_match,
+	},
+	.probe  = snd_rpi_wm8804_probe,
+};
+MODULE_DEVICE_TABLE(of, snd_rpi_wm8804_of_match);
+
+module_platform_driver(snd_rpi_wm8804_driver);
+
+MODULE_AUTHOR("Tim Gover <tim.gover@raspberrypi.org>");
+MODULE_DESCRIPTION("ASoC Raspberry Pi Hat generic digi driver for WM8804 based cards");
+MODULE_LICENSE("GPL v2");
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1192_70d3e99ecd5aa71cb914e068fbf1ce13bdc3604d.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1192_70d3e99ecd5aa71cb914e068fbf1ce13bdc3604d.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
