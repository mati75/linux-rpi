commit ddf966410acecb1cbdf06d0a79a41b6e664aeb44
Author: Nate Dailey <nate.dailey@stratus.com>
Date:   Thu Feb 7 14:19:01 2019 -0500

    md/raid1: don't clear bitmap bits on interrupted recovery.
    
    commit dfcc34c99f3ebc16b787b118763bf9cb6b1efc7a upstream.
    
    sync_request_write no longer submits writes to a Faulty device. This has
    the unfortunate side effect that bitmap bits can be incorrectly cleared
    if a recovery is interrupted (previously, end_sync_write would have
    prevented this). This means the next recovery may not copy everything
    it should, potentially corrupting data.
    
    Add a function for doing the proper md_bitmap_end_sync, called from
    end_sync_write and the Faulty case in sync_request_write.
    
    backport note to 4.14: s/md_bitmap_end_sync/bitmap_end_sync
    Cc: stable@vger.kernel.org 4.14+
    Fixes: 0c9d5b127f69 ("md/raid1: avoid reusing a resync bio after error handling.")
    Reviewed-by: Jack Wang <jinpu.wang@cloud.ionos.com>
    Tested-by: Jack Wang <jinpu.wang@cloud.ionos.com>
    Signed-off-by: Nate Dailey <nate.dailey@stratus.com>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/md/raid1.c b/drivers/md/raid1.c
index 1d54109071cc..fa47249fa3e4 100644
--- a/drivers/md/raid1.c
+++ b/drivers/md/raid1.c
@@ -1863,6 +1863,20 @@ static void end_sync_read(struct bio *bio)
 		reschedule_retry(r1_bio);
 }
 
+static void abort_sync_write(struct mddev *mddev, struct r1bio *r1_bio)
+{
+	sector_t sync_blocks = 0;
+	sector_t s = r1_bio->sector;
+	long sectors_to_go = r1_bio->sectors;
+
+	/* make sure these bits don't get cleared. */
+	do {
+		md_bitmap_end_sync(mddev->bitmap, s, &sync_blocks, 1);
+		s += sync_blocks;
+		sectors_to_go -= sync_blocks;
+	} while (sectors_to_go > 0);
+}
+
 static void end_sync_write(struct bio *bio)
 {
 	int uptodate = !bio->bi_status;
@@ -1874,15 +1888,7 @@ static void end_sync_write(struct bio *bio)
 	struct md_rdev *rdev = conf->mirrors[find_bio_disk(r1_bio, bio)].rdev;
 
 	if (!uptodate) {
-		sector_t sync_blocks = 0;
-		sector_t s = r1_bio->sector;
-		long sectors_to_go = r1_bio->sectors;
-		/* make sure these bits doesn't get cleared. */
-		do {
-			md_bitmap_end_sync(mddev->bitmap, s, &sync_blocks, 1);
-			s += sync_blocks;
-			sectors_to_go -= sync_blocks;
-		} while (sectors_to_go > 0);
+		abort_sync_write(mddev, r1_bio);
 		set_bit(WriteErrorSeen, &rdev->flags);
 		if (!test_and_set_bit(WantReplacement, &rdev->flags))
 			set_bit(MD_RECOVERY_NEEDED, &
@@ -2172,8 +2178,10 @@ static void sync_request_write(struct mddev *mddev, struct r1bio *r1_bio)
 		     (i == r1_bio->read_disk ||
 		      !test_bit(MD_RECOVERY_SYNC, &mddev->recovery))))
 			continue;
-		if (test_bit(Faulty, &conf->mirrors[i].rdev->flags))
+		if (test_bit(Faulty, &conf->mirrors[i].rdev->flags)) {
+			abort_sync_write(mddev, r1_bio);
 			continue;
+		}
 
 		bio_set_op_attrs(wbio, REQ_OP_WRITE, 0);
 		if (test_bit(FailFast, &conf->mirrors[i].rdev->flags))
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1431_ddf966410acecb1cbdf06d0a79a41b6e664aeb44.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1431_ddf966410acecb1cbdf06d0a79a41b6e664aeb44.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
