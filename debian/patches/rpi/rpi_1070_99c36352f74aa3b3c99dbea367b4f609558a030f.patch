commit 99c36352f74aa3b3c99dbea367b4f609558a030f
Author: gellert <gellert@raspberrypi.org>
Date:   Tue Jul 29 17:43:37 2014 +0100

    dmaengine: expand functionality by supporting scatter/gather transfers sdhci-bcm2708 and dma.c: fix for LITE channels

diff --git a/arch/arm/mach-bcm2708/dma.c b/arch/arm/mach-bcm2708/dma.c
index 1da2413..a5e58d1 100644
--- a/arch/arm/mach-bcm2708/dma.c
+++ b/arch/arm/mach-bcm2708/dma.c
@@ -156,6 +156,8 @@ static void vc_dmaman_init(struct vc_dmaman *dmaman, void __iomem *dma_base,
 	dmaman->chan_available = chans_available;
 	dmaman->has_feature[BCM_DMA_FEATURE_FAST_ORD] = 0x0c;  /* chans 2 & 3 */
 	dmaman->has_feature[BCM_DMA_FEATURE_BULK_ORD] = 0x01;  /* chan 0 */
+	dmaman->has_feature[BCM_DMA_FEATURE_NORMAL_ORD] = 0xfe;  /* chans 1 to 7 */
+	dmaman->has_feature[BCM_DMA_FEATURE_LITE_ORD] = 0x7f00;  /* chans 8 to 14 */
 }
 
 static int vc_dmaman_chan_alloc(struct vc_dmaman *dmaman,
diff --git a/arch/arm/mach-bcm2708/include/mach/dma.h b/arch/arm/mach-bcm2708/include/mach/dma.h
index a4aac4c..d03e7b5 100644
--- a/arch/arm/mach-bcm2708/include/mach/dma.h
+++ b/arch/arm/mach-bcm2708/include/mach/dma.h
@@ -77,9 +77,13 @@ extern int /*rc*/ bcm_dma_abort(void __iomem *dma_chan_base);
    those with higher priority smaller ordinal numbers */
 #define BCM_DMA_FEATURE_FAST_ORD 0
 #define BCM_DMA_FEATURE_BULK_ORD 1
+#define BCM_DMA_FEATURE_NORMAL_ORD 2
+#define BCM_DMA_FEATURE_LITE_ORD 3
 #define BCM_DMA_FEATURE_FAST	 (1<<BCM_DMA_FEATURE_FAST_ORD)
 #define BCM_DMA_FEATURE_BULK	 (1<<BCM_DMA_FEATURE_BULK_ORD)
-#define BCM_DMA_FEATURE_COUNT	 2
+#define BCM_DMA_FEATURE_NORMAL	 (1<<BCM_DMA_FEATURE_NORMAL_ORD)
+#define BCM_DMA_FEATURE_LITE	 (1<<BCM_DMA_FEATURE_LITE_ORD)
+#define BCM_DMA_FEATURE_COUNT	 4
 
 /* return channel no or -ve error */
 extern int bcm_dma_chan_alloc(unsigned preferred_feature_set,
diff --git a/drivers/dma/bcm2708-dmaengine.c b/drivers/dma/bcm2708-dmaengine.c
index b244293..8996125 100644
--- a/drivers/dma/bcm2708-dmaengine.c
+++ b/drivers/dma/bcm2708-dmaengine.c
@@ -1,11 +1,11 @@
 /*
- * BCM2708 DMA engine support
+ * BCM2835 DMA engine support
  *
- * This driver only supports cyclic DMA transfers
- * as needed for the I2S module.
+ * This driver supports cyclic and scatter/gather DMA transfers.
  *
  * Author:      Florian Meier <florian.meier@koalo.de>
- *              Copyright 2013
+ *              Gellert Weisz <gellert@raspberrypi.org>
+ *              Copyright 2013-2014
  *
  * Based on
  *	OMAP DMAengine support by Russell King
@@ -29,6 +29,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  */
+
 #include <linux/dmaengine.h>
 #include <linux/dma-mapping.h>
 #include <linux/err.h>
@@ -40,21 +41,40 @@
 #include <linux/slab.h>
 #include <linux/io.h>
 #include <linux/spinlock.h>
-#include <linux/irq.h>
 
-#include "virt-dma.h"
+#ifndef CONFIG_OF
 
+/* dma manager */
 #include <mach/dma.h>
-#include <mach/irqs.h>
 
-struct bcm2708_dmadev {
+//#define DMA_COMPLETE DMA_SUCCESS
+
+#endif
+
+#include <linux/of.h>
+#include <linux/of_dma.h>
+
+#include "virt-dma.h"
+
+
+struct bcm2835_dmadev {
 	struct dma_device ddev;
 	spinlock_t lock;
 	void __iomem *base;
 	struct device_dma_parameters dma_parms;
 };
 
-struct bcm2708_chan {
+struct bcm2835_dma_cb {
+	uint32_t info;
+	uint32_t src;
+	uint32_t dst;
+	uint32_t length;
+	uint32_t stride;
+	uint32_t next;
+	uint32_t pad[2];
+};
+
+struct bcm2835_chan {
 	struct virt_dma_chan vc;
 	struct list_head node;
 
@@ -62,48 +82,106 @@ struct bcm2708_chan {
 	bool cyclic;
 
 	int ch;
-	struct bcm2708_desc *desc;
+	struct bcm2835_desc *desc;
 
 	void __iomem *chan_base;
 	int irq_number;
+
+	unsigned int dreq;
 };
 
-struct bcm2708_desc {
+struct bcm2835_desc {
 	struct virt_dma_desc vd;
 	enum dma_transfer_direction dir;
 
 	unsigned int control_block_size;
-	struct bcm2708_dma_cb *control_block_base;
+	struct bcm2835_dma_cb *control_block_base;
 	dma_addr_t control_block_base_phys;
 
-	unsigned frames;
+	unsigned int frames;
 	size_t size;
 };
 
-#define BCM2708_DMA_DATA_TYPE_S8	1
-#define BCM2708_DMA_DATA_TYPE_S16	2
-#define BCM2708_DMA_DATA_TYPE_S32	4
-#define BCM2708_DMA_DATA_TYPE_S128	16
+#define BCM2835_DMA_CS		0x00
+#define BCM2835_DMA_ADDR	0x04
+#define BCM2835_DMA_SOURCE_AD	0x0c
+#define BCM2835_DMA_DEST_AD	0x10
+#define BCM2835_DMA_NEXTCB	0x1C
+
+/* DMA CS Control and Status bits */
+#define BCM2835_DMA_ACTIVE	BIT(0)
+#define BCM2835_DMA_INT	BIT(2)
+#define BCM2835_DMA_ISPAUSED	BIT(4)  /* Pause requested or not active */
+#define BCM2835_DMA_ISHELD	BIT(5)  /* Is held by DREQ flow control */
+#define BCM2835_DMA_ERR	BIT(8)
+#define BCM2835_DMA_ABORT	BIT(30) /* Stop current CB, go to next, WO */
+#define BCM2835_DMA_RESET	BIT(31) /* WO, self clearing */
+
+#define BCM2835_DMA_INT_EN	BIT(0)
+#define BCM2835_DMA_WAIT_RESP	BIT(3)
+#define BCM2835_DMA_D_INC	BIT(4)
+#define BCM2835_DMA_D_WIDTH	BIT(5)
+#define BCM2835_DMA_D_DREQ	BIT(6)
+#define BCM2835_DMA_S_INC	BIT(8)
+#define BCM2835_DMA_S_WIDTH	BIT(9)
+#define BCM2835_DMA_S_DREQ	BIT(10)
 
-static inline struct bcm2708_dmadev *to_bcm2708_dma_dev(struct dma_device *d)
+#define BCM2835_DMA_PER_MAP(x)	((x) << 16)
+#define	BCM2835_DMA_WAITS(x)	(((x)&0x1f) << 21)
+
+#define SDHCI_BCM_DMA_WAITS 0  /* delays slowing DMA transfers: 0-31 */
+
+#define BCM2835_DMA_DATA_TYPE_S8	1
+#define BCM2835_DMA_DATA_TYPE_S16	2
+#define BCM2835_DMA_DATA_TYPE_S32	4
+#define BCM2835_DMA_DATA_TYPE_S128	16
+
+#define BCM2835_DMA_BULK_MASK	BIT(0)
+#define BCM2835_DMA_FIQ_MASK	(BIT(2) | BIT(3))
+
+
+/* Valid only for channels 0 - 14, 15 has its own base address */
+#define BCM2835_DMA_CHAN(n)	((n) << 8) /* Base address */
+#define BCM2835_DMA_CHANIO(base, n) ((base) + BCM2835_DMA_CHAN(n))
+
+#define MAX_LITE_TRANSFER 32768
+#define MAX_NORMAL_TRANSFER 1073741824
+
+static inline struct bcm2835_dmadev *to_bcm2835_dma_dev(struct dma_device *d)
 {
-	return container_of(d, struct bcm2708_dmadev, ddev);
+	return container_of(d, struct bcm2835_dmadev, ddev);
 }
 
-static inline struct bcm2708_chan *to_bcm2708_dma_chan(struct dma_chan *c)
+static inline struct bcm2835_chan *to_bcm2835_dma_chan(struct dma_chan *c)
 {
-	return container_of(c, struct bcm2708_chan, vc.chan);
+	return container_of(c, struct bcm2835_chan, vc.chan);
 }
 
-static inline struct bcm2708_desc *to_bcm2708_dma_desc(
+static inline struct bcm2835_desc *to_bcm2835_dma_desc(
 		struct dma_async_tx_descriptor *t)
 {
-	return container_of(t, struct bcm2708_desc, vd.tx);
+	return container_of(t, struct bcm2835_desc, vd.tx);
 }
 
-static void bcm2708_dma_desc_free(struct virt_dma_desc *vd)
+static void dma_dumpregs(struct bcm2835_chan *c)
 {
-	struct bcm2708_desc *desc = container_of(vd, struct bcm2708_desc, vd);
+	pr_debug("-------------DMA DUMPREGS-------------\n");
+	pr_debug("CS=			%u\n",
+		readl(c->chan_base + BCM2835_DMA_CS));
+	pr_debug("ADDR=			%u\n",
+		readl(c->chan_base + BCM2835_DMA_ADDR));
+	pr_debug("SOURCE_ADDR=	%u\n",
+		readl(c->chan_base + BCM2835_DMA_SOURCE_AD));
+	pr_debug("DEST_AD=		%u\n",
+		readl(c->chan_base + BCM2835_DMA_DEST_AD));
+	pr_debug("NEXTCB=			%u\n",
+		readl(c->chan_base + BCM2835_DMA_NEXTCB));
+	pr_debug("--------------------------------------\n");
+}
+
+static void bcm2835_dma_desc_free(struct virt_dma_desc *vd)
+{
+	struct bcm2835_desc *desc = container_of(vd, struct bcm2835_desc, vd);
 	dma_free_coherent(desc->vd.tx.chan->device->dev,
 			desc->control_block_size,
 			desc->control_block_base,
@@ -111,10 +189,46 @@ static void bcm2708_dma_desc_free(struct virt_dma_desc *vd)
 	kfree(desc);
 }
 
-static void bcm2708_dma_start_desc(struct bcm2708_chan *c)
+static int bcm2835_dma_abort(void __iomem *chan_base)
+{
+	unsigned long cs;
+	long int timeout = 10000;
+
+	cs = readl(chan_base + BCM2835_DMA_CS);
+	if (!(cs & BCM2835_DMA_ACTIVE))
+		return 0;
+
+	/* Write 0 to the active bit - Pause the DMA */
+	writel(0, chan_base + BCM2835_DMA_CS);
+
+	/* Wait for any current AXI transfer to complete */
+	while ((cs & BCM2835_DMA_ISPAUSED) && --timeout) {
+		cpu_relax();
+		cs = readl(chan_base + BCM2835_DMA_CS);
+	}
+
+	/* We'll un-pause when we set of our next DMA */
+	if (!timeout)
+		return -ETIMEDOUT;
+
+	if (!(cs & BCM2835_DMA_ACTIVE))
+		return 0;
+
+	/* Terminate the control block chain */
+	writel(0, chan_base + BCM2835_DMA_NEXTCB);
+
+	/* Abort the whole DMA */
+	writel(BCM2835_DMA_ABORT | BCM2835_DMA_ACTIVE,
+	       chan_base + BCM2835_DMA_CS);
+
+	return 0;
+}
+
+
+static void bcm2835_dma_start_desc(struct bcm2835_chan *c)
 {
 	struct virt_dma_desc *vd = vchan_next_desc(&c->vc);
-	struct bcm2708_desc *d;
+	struct bcm2835_desc *d;
 
 	if (!vd) {
 		c->desc = NULL;
@@ -123,49 +237,62 @@ static void bcm2708_dma_start_desc(struct bcm2708_chan *c)
 
 	list_del(&vd->node);
 
-	c->desc = d = to_bcm2708_dma_desc(&vd->tx);
+	c->desc = d = to_bcm2835_dma_desc(&vd->tx);
+
+	writel(d->control_block_base_phys, c->chan_base + BCM2835_DMA_ADDR);
+	writel(BCM2835_DMA_ACTIVE, c->chan_base + BCM2835_DMA_CS);
 
-	bcm_dma_start(c->chan_base, d->control_block_base_phys);
 }
 
-static irqreturn_t bcm2708_dma_callback(int irq, void *data)
+static irqreturn_t bcm2835_dma_callback(int irq, void *data)
 {
-	struct bcm2708_chan *c = data;
-	struct bcm2708_desc *d;
+	struct bcm2835_chan *c = data;
+	struct bcm2835_desc *d;
 	unsigned long flags;
 
 	spin_lock_irqsave(&c->vc.lock, flags);
 
 	/* Acknowledge interrupt */
-	writel(BCM2708_DMA_INT, c->chan_base + BCM2708_DMA_CS);
+	writel(BCM2835_DMA_INT, c->chan_base + BCM2835_DMA_CS);
 
 	d = c->desc;
 
 	if (d) {
-		/* TODO Only works for cyclic DMA */
-		vchan_cyclic_callback(&d->vd);
-	}
+		if (c->cyclic) {
+			vchan_cyclic_callback(&d->vd);
 
-	/* Keep the DMA engine running */
-	dsb(); /* ARM synchronization barrier */
-	writel(BCM2708_DMA_ACTIVE, c->chan_base + BCM2708_DMA_CS);
+			/* Keep the DMA engine running */
+			writel(BCM2835_DMA_ACTIVE,
+				c->chan_base + BCM2835_DMA_CS);
+
+		} else {
+			vchan_cookie_complete(&c->desc->vd);
+			bcm2835_dma_start_desc(c);
+		}
+	}
 
 	spin_unlock_irqrestore(&c->vc.lock, flags);
 
 	return IRQ_HANDLED;
 }
 
-static int bcm2708_dma_alloc_chan_resources(struct dma_chan *chan)
+static int bcm2835_dma_alloc_chan_resources(struct dma_chan *chan)
 {
-	struct bcm2708_chan *c = to_bcm2708_dma_chan(chan);
+	struct bcm2835_chan *c = to_bcm2835_dma_chan(chan);
+	int ret;
+
+	dev_dbg(c->vc.chan.device->dev,
+			"Allocating DMA channel %d\n", c->ch);
+
+	ret = request_irq(c->irq_number,
+			bcm2835_dma_callback, 0, "DMA IRQ", c);
 
-	return request_irq(c->irq_number,
-			bcm2708_dma_callback, 0, "DMA IRQ", c);
+	return ret;
 }
 
-static void bcm2708_dma_free_chan_resources(struct dma_chan *chan)
+static void bcm2835_dma_free_chan_resources(struct dma_chan *chan)
 {
-	struct bcm2708_chan *c = to_bcm2708_dma_chan(chan);
+	struct bcm2835_chan *c = to_bcm2835_dma_chan(chan);
 
 	vchan_free_chan_resources(&c->vc);
 	free_irq(c->irq_number, c);
@@ -173,18 +300,18 @@ static void bcm2708_dma_free_chan_resources(struct dma_chan *chan)
 	dev_dbg(c->vc.chan.device->dev, "Freeing DMA channel %u\n", c->ch);
 }
 
-static size_t bcm2708_dma_desc_size(struct bcm2708_desc *d)
+static size_t bcm2835_dma_desc_size(struct bcm2835_desc *d)
 {
 	return d->size;
 }
 
-static size_t bcm2708_dma_desc_size_pos(struct bcm2708_desc *d, dma_addr_t addr)
+static size_t bcm2835_dma_desc_size_pos(struct bcm2835_desc *d, dma_addr_t addr)
 {
-	unsigned i;
+	unsigned int i;
 	size_t size;
 
 	for (size = i = 0; i < d->frames; i++) {
-		struct bcm2708_dma_cb *control_block =
+		struct bcm2835_dma_cb *control_block =
 			&d->control_block_base[i];
 		size_t this_size = control_block->length;
 		dma_addr_t dma;
@@ -203,13 +330,15 @@ static size_t bcm2708_dma_desc_size_pos(struct bcm2708_desc *d, dma_addr_t addr)
 	return size;
 }
 
-static enum dma_status bcm2708_dma_tx_status(struct dma_chan *chan,
+static enum dma_status bcm2835_dma_tx_status(struct dma_chan *chan,
 	dma_cookie_t cookie, struct dma_tx_state *txstate)
 {
-	struct bcm2708_chan *c = to_bcm2708_dma_chan(chan);
+	struct bcm2835_chan *c = to_bcm2835_dma_chan(chan);
+	struct bcm2835_desc *d;
 	struct virt_dma_desc *vd;
 	enum dma_status ret;
 	unsigned long flags;
+	dma_addr_t pos;
 
 	ret = dma_cookie_status(chan, cookie, txstate);
 	if (ret == DMA_COMPLETE || !txstate)
@@ -219,19 +348,18 @@ static enum dma_status bcm2708_dma_tx_status(struct dma_chan *chan,
 	vd = vchan_find_desc(&c->vc, cookie);
 	if (vd) {
 		txstate->residue =
-			bcm2708_dma_desc_size(to_bcm2708_dma_desc(&vd->tx));
+			bcm2835_dma_desc_size(to_bcm2835_dma_desc(&vd->tx));
 	} else if (c->desc && c->desc->vd.tx.cookie == cookie) {
-		struct bcm2708_desc *d = c->desc;
-		dma_addr_t pos;
+		d = c->desc;
 
 		if (d->dir == DMA_MEM_TO_DEV)
-			pos = readl(c->chan_base + BCM2708_DMA_SOURCE_AD);
+			pos = readl(c->chan_base + BCM2835_DMA_SOURCE_AD);
 		else if (d->dir == DMA_DEV_TO_MEM)
-			pos = readl(c->chan_base + BCM2708_DMA_DEST_AD);
+			pos = readl(c->chan_base + BCM2835_DMA_DEST_AD);
 		else
 			pos = 0;
 
-		txstate->residue = bcm2708_dma_desc_size_pos(d, pos);
+		txstate->residue = bcm2835_dma_desc_size_pos(d, pos);
 	} else {
 		txstate->residue = 0;
 	}
@@ -241,50 +369,50 @@ static enum dma_status bcm2708_dma_tx_status(struct dma_chan *chan,
 	return ret;
 }
 
-static void bcm2708_dma_issue_pending(struct dma_chan *chan)
+static void bcm2835_dma_issue_pending(struct dma_chan *chan)
 {
-	struct bcm2708_chan *c = to_bcm2708_dma_chan(chan);
+	struct bcm2835_chan *c = to_bcm2835_dma_chan(chan);
 	unsigned long flags;
 
-	c->cyclic = true; /* Nothing else is implemented */
-
 	spin_lock_irqsave(&c->vc.lock, flags);
 	if (vchan_issue_pending(&c->vc) && !c->desc)
-		bcm2708_dma_start_desc(c);
+		bcm2835_dma_start_desc(c);
 
 	spin_unlock_irqrestore(&c->vc.lock, flags);
 }
 
-static struct dma_async_tx_descriptor *bcm2708_dma_prep_dma_cyclic(
+static struct dma_async_tx_descriptor *bcm2835_dma_prep_dma_cyclic(
 	struct dma_chan *chan, dma_addr_t buf_addr, size_t buf_len,
 	size_t period_len, enum dma_transfer_direction direction,
 	unsigned long flags, void *context)
 {
-	struct bcm2708_chan *c = to_bcm2708_dma_chan(chan);
+	struct bcm2835_chan *c = to_bcm2835_dma_chan(chan);
 	enum dma_slave_buswidth dev_width;
-	struct bcm2708_desc *d;
+	struct bcm2835_desc *d;
 	dma_addr_t dev_addr;
-	unsigned es, sync_type;
-	unsigned frame;
+	unsigned int es, sync_type;
+	unsigned int frame;
 
 	/* Grab configuration */
+	if (!is_slave_direction(direction)) {
+		dev_err(chan->device->dev, "%s: bad direction?\n", __func__);
+		return NULL;
+	}
+
 	if (direction == DMA_DEV_TO_MEM) {
 		dev_addr = c->cfg.src_addr;
 		dev_width = c->cfg.src_addr_width;
-		sync_type = BCM2708_DMA_S_DREQ;
-	} else if (direction == DMA_MEM_TO_DEV) {
+		sync_type = BCM2835_DMA_S_DREQ;
+	} else {
 		dev_addr = c->cfg.dst_addr;
 		dev_width = c->cfg.dst_addr_width;
-		sync_type = BCM2708_DMA_D_DREQ;
-	} else {
-		dev_err(chan->device->dev, "%s: bad direction?\n", __func__);
-		return NULL;
+		sync_type = BCM2835_DMA_D_DREQ;
 	}
 
 	/* Bus width translates to the element size (ES) */
 	switch (dev_width) {
 	case DMA_SLAVE_BUSWIDTH_4_BYTES:
-		es = BCM2708_DMA_DATA_TYPE_S32;
+		es = BCM2835_DMA_DATA_TYPE_S32;
 		break;
 	default:
 		return NULL;
@@ -299,7 +427,7 @@ static struct dma_async_tx_descriptor *bcm2708_dma_prep_dma_cyclic(
 	d->frames = buf_len / period_len;
 
 	/* Allocate memory for control blocks */
-	d->control_block_size = d->frames * sizeof(struct bcm2708_dma_cb);
+	d->control_block_size = d->frames * sizeof(struct bcm2835_dma_cb);
 	d->control_block_base = dma_zalloc_coherent(chan->device->dev,
 			d->control_block_size, &d->control_block_base_phys,
 			GFP_NOWAIT);
@@ -314,22 +442,22 @@ static struct dma_async_tx_descriptor *bcm2708_dma_prep_dma_cyclic(
 	 * for each frame and link them together.
 	 */
 	for (frame = 0; frame < d->frames; frame++) {
-		struct bcm2708_dma_cb *control_block =
+		struct bcm2835_dma_cb *control_block =
 			&d->control_block_base[frame];
 
 		/* Setup adresses */
 		if (d->dir == DMA_DEV_TO_MEM) {
-			control_block->info = BCM2708_DMA_D_INC;
+			control_block->info = BCM2835_DMA_D_INC;
 			control_block->src = dev_addr;
 			control_block->dst = buf_addr + frame * period_len;
 		} else {
-			control_block->info = BCM2708_DMA_S_INC;
+			control_block->info = BCM2835_DMA_S_INC;
 			control_block->src = buf_addr + frame * period_len;
 			control_block->dst = dev_addr;
 		}
 
 		/* Enable interrupt */
-		control_block->info |= BCM2708_DMA_INT_EN;
+		control_block->info |= BCM2835_DMA_INT_EN;
 
 		/* Setup synchronization */
 		if (sync_type != 0)
@@ -338,7 +466,7 @@ static struct dma_async_tx_descriptor *bcm2708_dma_prep_dma_cyclic(
 		/* Setup DREQ channel */
 		if (c->cfg.slave_id != 0)
 			control_block->info |=
-				BCM2708_DMA_PER_MAP(c->cfg.slave_id);
+				BCM2835_DMA_PER_MAP(c->cfg.slave_id);
 
 		/* Length of a frame */
 		control_block->length = period_len;
@@ -346,18 +474,166 @@ static struct dma_async_tx_descriptor *bcm2708_dma_prep_dma_cyclic(
 
 		/*
 		 * Next block is the next frame.
-		 * This DMA engine driver currently only supports cyclic DMA.
+		 * This function is called on cyclic DMA transfers.
 		 * Therefore, wrap around at number of frames.
 		 */
 		control_block->next = d->control_block_base_phys +
-			sizeof(struct bcm2708_dma_cb)
+			sizeof(struct bcm2835_dma_cb)
 			* ((frame + 1) % d->frames);
 	}
 
+	c->cyclic = true;
+
 	return vchan_tx_prep(&c->vc, &d->vd, flags);
 }
 
-static int bcm2708_dma_slave_config(struct bcm2708_chan *c,
+
+static struct dma_async_tx_descriptor *bcm2835_dma_prep_slave_sg(
+	struct dma_chan *chan, struct scatterlist *sgl,
+	unsigned int sg_len, enum dma_transfer_direction direction,
+	unsigned long flags, void *context)
+{
+	struct bcm2835_chan *c = to_bcm2835_dma_chan(chan);
+	enum dma_slave_buswidth dev_width;
+	struct bcm2835_desc *d;
+	dma_addr_t dev_addr;
+	struct scatterlist *sgent;
+	unsigned int es, sync_type;
+	unsigned int i, j, splitct, max_size;
+
+	if (!is_slave_direction(direction)) {
+		dev_err(chan->device->dev, "%s: bad direction?\n", __func__);
+		return NULL;
+	}
+
+	if (direction == DMA_DEV_TO_MEM) {
+		dev_addr = c->cfg.src_addr;
+		dev_width = c->cfg.src_addr_width;
+		sync_type = BCM2835_DMA_S_DREQ;
+	} else {
+		dev_addr = c->cfg.dst_addr;
+		dev_width = c->cfg.dst_addr_width;
+		sync_type = BCM2835_DMA_D_DREQ;
+	}
+
+	/* Bus width translates to the element size (ES) */
+	switch (dev_width) {
+	case DMA_SLAVE_BUSWIDTH_4_BYTES:
+		es = BCM2835_DMA_DATA_TYPE_S32;
+		break;
+	default:
+		return NULL;
+	}
+
+	/* Now allocate and setup the descriptor. */
+	d = kzalloc(sizeof(*d), GFP_NOWAIT);
+	if (!d)
+		return NULL;
+
+	d->dir = direction;
+
+	if (c->ch >= 8) /* we have a LITE channel */
+		max_size = MAX_LITE_TRANSFER;
+	else
+		max_size = MAX_NORMAL_TRANSFER;
+
+	/* We store the length of the SG list in d->frames
+	   taking care to account for splitting up transfers
+	   too large for a LITE channel */
+
+	d->frames = 0;
+	for_each_sg(sgl, sgent, sg_len, i) {
+		uint32_t len = sg_dma_len(sgent);
+		d->frames += 1 + len / max_size;
+	}
+
+	/* Allocate memory for control blocks */
+	d->control_block_size = d->frames * sizeof(struct bcm2835_dma_cb);
+	d->control_block_base = dma_zalloc_coherent(chan->device->dev,
+			d->control_block_size, &d->control_block_base_phys,
+			GFP_NOWAIT);
+
+	if (!d->control_block_base) {
+		kfree(d);
+		return NULL;
+	}
+
+	/*
+	 * Iterate over all SG entries, create a control block
+	 * for each frame and link them together.
+	 */
+
+	/* we count the number of times an SG entry had to be splitct
+	   as a result of using a LITE channel */
+	splitct = 0;
+
+	for_each_sg(sgl, sgent, sg_len, i) {
+		dma_addr_t addr = sg_dma_address(sgent);
+		uint32_t len = sg_dma_len(sgent);
+
+		for (j = 0; j < len; j += max_size) {
+			struct bcm2835_dma_cb *control_block =
+				&d->control_block_base[i+splitct];
+
+			/* Setup adresses */
+			if (d->dir == DMA_DEV_TO_MEM) {
+				control_block->info = BCM2835_DMA_D_INC |
+					BCM2835_DMA_D_WIDTH | BCM2835_DMA_S_DREQ;
+				control_block->src = dev_addr;
+				control_block->dst = addr + (dma_addr_t)j;
+			} else {
+				control_block->info = BCM2835_DMA_S_INC |
+					BCM2835_DMA_S_WIDTH | BCM2835_DMA_D_DREQ;
+				control_block->src = addr + (dma_addr_t)j;
+				control_block->dst = dev_addr;
+			}
+
+			/* Common part */
+			control_block->info |= BCM2835_DMA_WAITS(SDHCI_BCM_DMA_WAITS);
+			control_block->info |= BCM2835_DMA_WAIT_RESP;
+
+			/* Enable  */
+			if (i == sg_len-1 && len-j <= max_size)
+				control_block->info |= BCM2835_DMA_INT_EN;
+
+			/* Setup synchronization */
+			if (sync_type != 0)
+				control_block->info |= sync_type;
+
+			/* Setup DREQ channel */
+			c->dreq = c->cfg.slave_id; /* DREQ loaded from config */
+
+			if (c->dreq != 0)
+				control_block->info |=
+					BCM2835_DMA_PER_MAP(c->dreq);
+
+			/* Length of a frame */
+			control_block->length = min(len-j, max_size);
+			d->size += control_block->length;
+
+			/*
+			 * Next block is the next frame.
+			 */
+			if (i < sg_len-1 || len-j > max_size) {
+				/* next block is the next frame. */
+				control_block->next = d->control_block_base_phys +
+				sizeof(struct bcm2835_dma_cb) * (i + splitct + 1);
+			} else {
+				/* next block is empty. */
+				control_block->next = 0;
+			}
+
+			if (len-j > max_size)
+				splitct++;
+		}
+	}
+
+	c->cyclic = false;
+
+	return vchan_tx_prep(&c->vc, &d->vd, flags);
+}
+
+static int bcm2835_dma_slave_config(struct bcm2835_chan *c,
 		struct dma_slave_config *cfg)
 {
 	if ((cfg->direction == DMA_DEV_TO_MEM &&
@@ -373,9 +649,9 @@ static int bcm2708_dma_slave_config(struct bcm2708_chan *c,
 	return 0;
 }
 
-static int bcm2708_dma_terminate_all(struct bcm2708_chan *c)
+static int bcm2835_dma_terminate_all(struct bcm2835_chan *c)
 {
-	struct bcm2708_dmadev *d = to_bcm2708_dma_dev(c->vc.chan.device);
+	struct bcm2835_dmadev *d = to_bcm2835_dma_dev(c->vc.chan.device);
 	unsigned long flags;
 	int timeout = 10000;
 	LIST_HEAD(head);
@@ -394,19 +670,18 @@ static int bcm2708_dma_terminate_all(struct bcm2708_chan *c)
 	 */
 	if (c->desc) {
 		c->desc = NULL;
-		bcm_dma_abort(c->chan_base);
+		bcm2835_dma_abort(c->chan_base);
 
 		/* Wait for stopping */
-		while (timeout > 0) {
-			timeout--;
-			if (!(readl(c->chan_base + BCM2708_DMA_CS) &
-						BCM2708_DMA_ACTIVE))
+		while (--timeout) {
+			if (!(readl(c->chan_base + BCM2835_DMA_CS) &
+						BCM2835_DMA_ACTIVE))
 				break;
 
 			cpu_relax();
 		}
 
-		if (timeout <= 0)
+		if (!timeout)
 			dev_err(d->ddev.dev, "DMA transfer could not be terminated\n");
 	}
 
@@ -417,34 +692,57 @@ static int bcm2708_dma_terminate_all(struct bcm2708_chan *c)
 	return 0;
 }
 
-static int bcm2708_dma_control(struct dma_chan *chan, enum dma_ctrl_cmd cmd,
+static int bcm2835_dma_control(struct dma_chan *chan, enum dma_ctrl_cmd cmd,
 	unsigned long arg)
 {
-	struct bcm2708_chan *c = to_bcm2708_dma_chan(chan);
+	struct bcm2835_chan *c = to_bcm2835_dma_chan(chan);
 
 	switch (cmd) {
 	case DMA_SLAVE_CONFIG:
-		return bcm2708_dma_slave_config(c,
+		return bcm2835_dma_slave_config(c,
 				(struct dma_slave_config *)arg);
 
 	case DMA_TERMINATE_ALL:
-		return bcm2708_dma_terminate_all(c);
+		return bcm2835_dma_terminate_all(c);
 
 	default:
 		return -ENXIO;
 	}
 }
 
-static int bcm2708_dma_chan_init(struct bcm2708_dmadev *d, void __iomem* chan_base,
-									int chan_id, int irq)
+#ifdef CONFIG_OF
+static int bcm2835_dma_chan_init(struct bcm2835_dmadev *d, int chan_id, int irq)
 {
-	struct bcm2708_chan *c;
+	struct bcm2835_chan *c;
 
 	c = devm_kzalloc(d->ddev.dev, sizeof(*c), GFP_KERNEL);
 	if (!c)
 		return -ENOMEM;
 
-	c->vc.desc_free = bcm2708_dma_desc_free;
+	c->vc.desc_free = bcm2835_dma_desc_free;
+	vchan_init(&c->vc, &d->ddev);
+	INIT_LIST_HEAD(&c->node);
+
+	d->ddev.chancnt++;
+
+	c->chan_base = BCM2835_DMA_CHANIO(d->base, chan_id);
+	c->ch = chan_id;
+	c->irq_number = irq;
+
+	return 0;
+}
+#endif
+
+static int bcm2708_dma_chan_init(struct bcm2835_dmadev *d,
+	void __iomem *chan_base, int chan_id, int irq)
+{
+	struct bcm2835_chan *c;
+
+	c = devm_kzalloc(d->ddev.dev, sizeof(*c), GFP_KERNEL);
+	if (!c)
+		return -ENOMEM;
+
+	c->vc.desc_free = bcm2835_dma_desc_free;
 	vchan_init(&c->vc, &d->ddev);
 	INIT_LIST_HEAD(&c->node);
 
@@ -457,30 +755,81 @@ static int bcm2708_dma_chan_init(struct bcm2708_dmadev *d, void __iomem* chan_ba
 	return 0;
 }
 
-static void bcm2708_dma_free(struct bcm2708_dmadev *od)
+
+static void bcm2835_dma_free(struct bcm2835_dmadev *od)
 {
-	while (!list_empty(&od->ddev.channels)) {
-		struct bcm2708_chan *c = list_first_entry(&od->ddev.channels,
-			struct bcm2708_chan, vc.chan.device_node);
+	struct bcm2835_chan *c, *next;
 
+	list_for_each_entry_safe(c, next, &od->ddev.channels,
+				 vc.chan.device_node) {
 		list_del(&c->vc.chan.device_node);
 		tasklet_kill(&c->vc.task);
 	}
 }
 
-static int bcm2708_dma_probe(struct platform_device *pdev)
+static const struct of_device_id bcm2835_dma_of_match[] = {
+	{ .compatible = "brcm,bcm2835-dma", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, bcm2835_dma_of_match);
+
+#ifdef CONFIG_OF
+static struct dma_chan *bcm2835_dma_xlate(struct of_phandle_args *spec,
+					   struct of_dma *ofdma)
+{
+	struct bcm2835_dmadev *d = ofdma->of_dma_data;
+	struct dma_chan *chan;
+
+	chan = dma_get_any_slave_channel(&d->ddev);
+	if (!chan)
+		return NULL;
+
+	/* Set DREQ from param */
+	to_bcm2835_dma_chan(chan)->dreq = spec->args[0];
+
+	return chan;
+}
+#endif
+
+static int bcm2835_dma_device_slave_caps(struct dma_chan *dchan,
+	struct dma_slave_caps *caps)
 {
-	struct bcm2708_dmadev *od;
-	int rc, i;
+	caps->src_addr_widths = BIT(DMA_SLAVE_BUSWIDTH_4_BYTES);
+	caps->dstn_addr_widths = BIT(DMA_SLAVE_BUSWIDTH_4_BYTES);
+	caps->directions = BIT(DMA_DEV_TO_MEM) | BIT(DMA_MEM_TO_DEV);
+	caps->cmd_pause = false;
+	caps->cmd_terminate = true;
+
+	return 0;
+}
+
+static int bcm2835_dma_probe(struct platform_device *pdev)
+{
+	struct bcm2835_dmadev *od;
+#ifdef CONFIG_OF
+	struct resource *res;
+	void __iomem *base;
+	uint32_t chans_available;
+#endif
+	int rc;
+	int i;
+	int irq;
+
 
 	if (!pdev->dev.dma_mask)
 		pdev->dev.dma_mask = &pdev->dev.coherent_dma_mask;
 
+	/* If CONFIG_OF is selected, device tree is used */
+	/* hence the difference between probing */
+
+#ifndef CONFIG_OF
+
 	rc = dma_set_mask(&pdev->dev, DMA_BIT_MASK(32));
 	if (rc)
 		return rc;
 	dma_set_coherent_mask(&pdev->dev, DMA_BIT_MASK(32));
 
+
 	od = devm_kzalloc(&pdev->dev, sizeof(*od), GFP_KERNEL);
 	if (!od)
 		return -ENOMEM;
@@ -488,25 +837,29 @@ static int bcm2708_dma_probe(struct platform_device *pdev)
 	pdev->dev.dma_parms = &od->dma_parms;
 	dma_set_max_seg_size(&pdev->dev, 0x3FFFFFFF);
 
+
 	dma_cap_set(DMA_SLAVE, od->ddev.cap_mask);
+	dma_cap_set(DMA_PRIVATE, od->ddev.cap_mask);
 	dma_cap_set(DMA_CYCLIC, od->ddev.cap_mask);
-	od->ddev.device_alloc_chan_resources = bcm2708_dma_alloc_chan_resources;
-	od->ddev.device_free_chan_resources = bcm2708_dma_free_chan_resources;
-	od->ddev.device_tx_status = bcm2708_dma_tx_status;
-	od->ddev.device_issue_pending = bcm2708_dma_issue_pending;
-	od->ddev.device_prep_dma_cyclic = bcm2708_dma_prep_dma_cyclic;
-	od->ddev.device_control = bcm2708_dma_control;
+	od->ddev.device_alloc_chan_resources = bcm2835_dma_alloc_chan_resources;
+	od->ddev.device_free_chan_resources = bcm2835_dma_free_chan_resources;
+	od->ddev.device_tx_status = bcm2835_dma_tx_status;
+	od->ddev.device_issue_pending = bcm2835_dma_issue_pending;
+	od->ddev.device_slave_caps = bcm2835_dma_device_slave_caps;
+	od->ddev.device_prep_dma_cyclic = bcm2835_dma_prep_dma_cyclic;
+	od->ddev.device_prep_slave_sg = bcm2835_dma_prep_slave_sg;
+	od->ddev.device_control = bcm2835_dma_control;
 	od->ddev.dev = &pdev->dev;
 	INIT_LIST_HEAD(&od->ddev.channels);
 	spin_lock_init(&od->lock);
 
 	platform_set_drvdata(pdev, od);
 
-	for (i = 0; i < 16; i++) {
-		void __iomem* chan_base;
-		int chan_id, irq;
+	for (i = 0; i < 5; i++) {
+		void __iomem *chan_base;
+		int chan_id;
 
-		chan_id = bcm_dma_chan_alloc(BCM_DMA_FEATURE_FAST,
+		chan_id = bcm_dma_chan_alloc(BCM_DMA_FEATURE_LITE,
 			&chan_base,
 			&irq);
 
@@ -514,38 +867,121 @@ static int bcm2708_dma_probe(struct platform_device *pdev)
 			break;
 
 		rc = bcm2708_dma_chan_init(od, chan_base, chan_id, irq);
-		if (rc) {
-			bcm2708_dma_free(od);
-			return rc;
+		if (rc)
+			goto err_no_dma;
+	}
+#else
+	rc = dma_set_mask_and_coherent(&pdev->dev, DMA_BIT_MASK(32));
+	if (rc)
+		return rc;
+
+
+	od = devm_kzalloc(&pdev->dev, sizeof(*od), GFP_KERNEL);
+	if (!od)
+		return -ENOMEM;
+
+	pdev->dev.dma_parms = &od->dma_parms;
+	dma_set_max_seg_size(&pdev->dev, 0x3FFFFFFF);
+
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	base = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(base))
+		return PTR_ERR(base);
+
+	od->base = base;
+
+
+	dma_cap_set(DMA_SLAVE, od->ddev.cap_mask);
+	dma_cap_set(DMA_PRIVATE, od->ddev.cap_mask);
+	dma_cap_set(DMA_CYCLIC, od->ddev.cap_mask);
+	od->ddev.device_alloc_chan_resources = bcm2835_dma_alloc_chan_resources;
+	od->ddev.device_free_chan_resources = bcm2835_dma_free_chan_resources;
+	od->ddev.device_tx_status = bcm2835_dma_tx_status;
+	od->ddev.device_issue_pending = bcm2835_dma_issue_pending;
+	od->ddev.device_slave_caps = bcm2835_dma_device_slave_caps;
+	od->ddev.device_prep_dma_cyclic = bcm2835_dma_prep_dma_cyclic;
+	od->ddev.device_prep_slave_sg = bcm2835_dma_prep_slave_sg;
+	od->ddev.device_control = bcm2835_dma_control;
+	od->ddev.dev = &pdev->dev;
+	INIT_LIST_HEAD(&od->ddev.channels);
+	spin_lock_init(&od->lock);
+
+	platform_set_drvdata(pdev, od);
+
+
+	/* Request DMA channel mask from device tree */
+	if (of_property_read_u32(pdev->dev.of_node,
+			"brcm,dma-channel-mask",
+			&chans_available)) {
+		dev_err(&pdev->dev, "Failed to get channel mask\n");
+		rc = -EINVAL;
+		goto err_no_dma;
+	}
+
+
+	/*
+	 * Do not use the FIQ and BULK channels,
+	 * because they are used by the GPU.
+	 */
+	chans_available &= ~(BCM2835_DMA_FIQ_MASK | BCM2835_DMA_BULK_MASK);
+
+
+	for (i = 0; i < pdev->num_resources; i++) {
+		irq = platform_get_irq(pdev, i);
+		if (irq < 0)
+			break;
+
+		if (chans_available & (1 << i)) {
+			rc = bcm2835_dma_chan_init(od, i, irq);
+			if (rc)
+				goto err_no_dma;
 		}
 	}
 
+	dev_dbg(&pdev->dev, "Initialized %i DMA channels\n", i);
+
+	/* Device-tree DMA controller registration */
+	rc = of_dma_controller_register(pdev->dev.of_node,
+			bcm2835_dma_xlate, od);
+	if (rc) {
+		dev_err(&pdev->dev, "Failed to register DMA controller\n");
+		goto err_no_dma;
+	}
+#endif
+
 	rc = dma_async_device_register(&od->ddev);
 	if (rc) {
 		dev_err(&pdev->dev,
 			"Failed to register slave DMA engine device: %d\n", rc);
-		bcm2708_dma_free(od);
-		return rc;
+		goto err_no_dma;
 	}
 
-	dev_dbg(&pdev->dev, "Load BCM2708 DMA engine driver\n");
+	dev_info(&pdev->dev, "Load BCM2835 DMA engine driver\n");
 
+	return 0;
+
+err_no_dma:
+	bcm2835_dma_free(od);
 	return rc;
 }
 
-static int bcm2708_dma_remove(struct platform_device *pdev)
+static int bcm2835_dma_remove(struct platform_device *pdev)
 {
-	struct bcm2708_dmadev *od = platform_get_drvdata(pdev);
+	struct bcm2835_dmadev *od = platform_get_drvdata(pdev);
 
 	dma_async_device_unregister(&od->ddev);
-	bcm2708_dma_free(od);
+	bcm2835_dma_free(od);
 
 	return 0;
 }
 
-static struct platform_driver bcm2708_dma_driver = {
-	.probe	= bcm2708_dma_probe,
-	.remove	= bcm2708_dma_remove,
+#ifndef CONFIG_OF
+
+
+static struct platform_driver bcm2835_dma_driver = {
+	.probe	= bcm2835_dma_probe,
+	.remove	= bcm2835_dma_remove,
 	.driver = {
 		.name = "bcm2708-dmaengine",
 		.owner = THIS_MODULE,
@@ -554,35 +990,52 @@ static struct platform_driver bcm2708_dma_driver = {
 
 static struct platform_device *pdev;
 
-static const struct platform_device_info bcm2708_dma_dev_info = {
+static const struct platform_device_info bcm2835_dma_dev_info = {
 	.name = "bcm2708-dmaengine",
 	.id = -1,
 };
 
-static int bcm2708_dma_init(void)
+static int bcm2835_dma_init(void)
 {
-	int rc = platform_driver_register(&bcm2708_dma_driver);
+	int rc = platform_driver_register(&bcm2835_dma_driver);
 
 	if (rc == 0) {
-		pdev = platform_device_register_full(&bcm2708_dma_dev_info);
+		pdev = platform_device_register_full(&bcm2835_dma_dev_info);
 		if (IS_ERR(pdev)) {
-			platform_driver_unregister(&bcm2708_dma_driver);
+			platform_driver_unregister(&bcm2835_dma_driver);
 			rc = PTR_ERR(pdev);
 		}
 	}
 
 	return rc;
 }
-subsys_initcall(bcm2708_dma_init);
+module_init(bcm2835_dma_init); /* preferable to subsys_initcall */
 
-static void __exit bcm2708_dma_exit(void)
+static void __exit bcm2835_dma_exit(void)
 {
 	platform_device_unregister(pdev);
-	platform_driver_unregister(&bcm2708_dma_driver);
+	platform_driver_unregister(&bcm2835_dma_driver);
 }
-module_exit(bcm2708_dma_exit);
+module_exit(bcm2835_dma_exit);
+
+#else
+
+static struct platform_driver bcm2835_dma_driver = {
+	.probe	= bcm2835_dma_probe,
+	.remove	= bcm2835_dma_remove,
+	.driver = {
+		.name = "bcm2835-dma",
+		.owner = THIS_MODULE,
+		.of_match_table = of_match_ptr(bcm2835_dma_of_match),
+	},
+};
+
+module_platform_driver(bcm2835_dma_driver);
+
+#endif
 
-MODULE_ALIAS("platform:bcm2708-dma");
-MODULE_DESCRIPTION("BCM2708 DMA engine driver");
+MODULE_ALIAS("platform:bcm2835-dma");
+MODULE_DESCRIPTION("BCM2835 DMA engine driver");
 MODULE_AUTHOR("Florian Meier <florian.meier@koalo.de>");
+MODULE_AUTHOR("Gellert Weisz <gellert@raspberrypi.org>");
 MODULE_LICENSE("GPL v2");
diff --git a/drivers/mmc/host/sdhci-bcm2708.c b/drivers/mmc/host/sdhci-bcm2708.c
index 6e777f4..15445215 100644
--- a/drivers/mmc/host/sdhci-bcm2708.c
+++ b/drivers/mmc/host/sdhci-bcm2708.c
@@ -69,6 +69,9 @@
 #define DMA_SDHCI_BASE	 0x7e300000  /* EMMC register block on Videocore */
 #define DMA_SDHCI_BUFFER (DMA_SDHCI_BASE + SDHCI_BUFFER)
 
+#define MAX_LITE_TRANSFER 32768
+#define MAX_NORMAL_TRANSFER 1073741824
+
 #define BCM2708_SDHCI_SLEEP_TIMEOUT 1000   /* msecs */
 
 /* Mhz clock that the EMMC core is running at. Should match the platform clockman settings */
@@ -444,29 +447,39 @@ static void schci_bcm2708_cb_read(struct sdhci_bcm2708_priv *host,
 				  dma_addr_t dma_addr, unsigned len,
 				  int /*bool*/ is_last)
 {
-	struct bcm2708_dma_cb *cb = &host->cb_base[ix];
-        unsigned char dmawaits = host->dma_waits;
-
-	cb->info   = BCM2708_DMA_PER_MAP(BCM2708_DMA_DREQ_EMMC) |
-		     BCM2708_DMA_WAITS(dmawaits) |
-		     BCM2708_DMA_S_DREQ	 |
-		     BCM2708_DMA_D_WIDTH |
-		     BCM2708_DMA_D_INC;
-	cb->src	   = DMA_SDHCI_BUFFER;	/* DATA register DMA address */
-	cb->dst	   = dma_addr;
-	cb->length = len;
-	cb->stride = 0;
-
-	if (is_last) {
-		cb->info |= BCM2708_DMA_INT_EN |
-		     BCM2708_DMA_WAIT_RESP;
-		cb->next = 0;
-	} else
-		cb->next = host->cb_handle +
-			   (ix+1)*sizeof(struct bcm2708_dma_cb);
+	struct bcm2708_dma_cb *cb;
+	unsigned char dmawaits = host->dma_waits;
+	unsigned i, max_size;
 
-	cb->pad[0] = 0;
-	cb->pad[1] = 0;
+	if (host->dma_chan >= 8) /* we have a LITE channel */
+		max_size = MAX_LITE_TRANSFER;
+	else
+		max_size = MAX_NORMAL_TRANSFER;
+
+	for (i = 0; i < len; i += max_size) {
+		cb = &host->cb_base[ix+i/max_size];
+
+		cb->info   = BCM2708_DMA_PER_MAP(BCM2708_DMA_DREQ_EMMC) |
+				 BCM2708_DMA_WAITS(dmawaits) |
+				 BCM2708_DMA_WAIT_RESP |
+				 BCM2708_DMA_S_DREQ	 |
+				 BCM2708_DMA_D_WIDTH |
+				 BCM2708_DMA_D_INC;
+		cb->src	   = DMA_SDHCI_BUFFER;	/* DATA register DMA address */
+		cb->dst	   = dma_addr + (dma_addr_t)i;
+		cb->length = min(len-i, max_size);
+		cb->stride = 0;
+
+		if (is_last && len-i <= max_size) {
+			cb->info |= BCM2708_DMA_INT_EN;
+			cb->next = 0;
+		} else
+			cb->next = host->cb_handle +
+				(ix+1 + i/max_size)*sizeof(struct bcm2708_dma_cb);
+
+		cb->pad[0] = 0;
+		cb->pad[1] = 0;
+	}
 }
 
 static void schci_bcm2708_cb_write(struct sdhci_bcm2708_priv *host,
@@ -475,30 +488,42 @@ static void schci_bcm2708_cb_write(struct sdhci_bcm2708_priv *host,
 				   int /*bool*/ is_last)
 {
 	struct bcm2708_dma_cb *cb = &host->cb_base[ix];
-        unsigned char dmawaits = host->dma_waits;
+	unsigned char dmawaits = host->dma_waits;
+	unsigned i, max_size;
+
+	if (host->dma_chan >= 8) /* we have a LITE channel */
+		max_size = MAX_LITE_TRANSFER;
+	else
+		max_size = MAX_NORMAL_TRANSFER;
 
 	/* We can make arbitrarily large writes as long as we specify DREQ to
-	   pace the delivery of bytes to the Arasan hardware */
-	cb->info   = BCM2708_DMA_PER_MAP(BCM2708_DMA_DREQ_EMMC) |
-		     BCM2708_DMA_WAITS(dmawaits) |
-		     BCM2708_DMA_D_DREQ	 |
-		     BCM2708_DMA_S_WIDTH |
-		     BCM2708_DMA_S_INC;
-	cb->src	   = dma_addr;
-	cb->dst	   = DMA_SDHCI_BUFFER;	/* DATA register DMA address */
-	cb->length = len;
-	cb->stride = 0;
-
-	if (is_last) {
-		cb->info |= BCM2708_DMA_INT_EN |
-		     BCM2708_DMA_WAIT_RESP;
-		cb->next = 0;
-	} else
-		cb->next = host->cb_handle +
-			   (ix+1)*sizeof(struct bcm2708_dma_cb);
+	   pace the delivery of bytes to the Arasan hardware. However we need
+	   to take care when using LITE channels */
+
+	for (i = 0; i < len; i += max_size) {
+		cb = &host->cb_base[ix+i/max_size];
+
+		cb->info   = BCM2708_DMA_PER_MAP(BCM2708_DMA_DREQ_EMMC) |
+				 BCM2708_DMA_WAITS(dmawaits) |
+				 BCM2708_DMA_WAIT_RESP |
+				 BCM2708_DMA_D_DREQ	 |
+				 BCM2708_DMA_S_WIDTH |
+				 BCM2708_DMA_S_INC;
+		cb->src	   = dma_addr + (dma_addr_t)i;
+		cb->dst	   = DMA_SDHCI_BUFFER;	/* DATA register DMA address */
+		cb->length = min(len-i, max_size);
+		cb->stride = 0;
+
+		if (is_last && len-i <= max_size) {
+			cb->info |= BCM2708_DMA_INT_EN;
+			cb->next = 0;
+		} else
+			cb->next = host->cb_handle +
+				(ix+1 + i/max_size)*sizeof(struct bcm2708_dma_cb);
 
-	cb->pad[0] = 0;
-	cb->pad[1] = 0;
+		cb->pad[0] = 0;
+		cb->pad[1] = 0;
+	}
 }
 
 
@@ -1390,5 +1415,3 @@ MODULE_PARM_DESC(emmc_clock_freq, "Specify the speed of emmc clock");
 MODULE_PARM_DESC(sync_after_dma, "Block in driver until dma complete");
 MODULE_PARM_DESC(missing_status, "Use the missing status quirk");
 MODULE_PARM_DESC(extra_messages, "Enable more sdcard warning messages");
-
-
