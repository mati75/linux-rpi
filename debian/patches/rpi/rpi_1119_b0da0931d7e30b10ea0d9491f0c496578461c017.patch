commit b0da0931d7e30b10ea0d9491f0c496578461c017
Author: Eric Anholt <eric@anholt.net>
Date:   Mon Feb 5 18:01:02 2018 +0000

    drm/vc4: Fix warning about vblank interrupts before DRM core is ready.
    
    The SMICS interrupt fires continuously, but since it's 1/100 the rate
    of the USB interrupts, we don't really need a way to turn it off.  We
    do need to make sure that we don't tell DRM about it until DRM has
    asked for the interrupt at least once, because otherwise it will throw
    a warning at boot time.
    
    Signed-off-by: Eric Anholt <eric@anholt.net>

diff --git a/drivers/gpu/drm/vc4/vc4_firmware_kms.c b/drivers/gpu/drm/vc4/vc4_firmware_kms.c
index 7edb38953a6a..967a0bf5886b 100644
--- a/drivers/gpu/drm/vc4/vc4_firmware_kms.c
+++ b/drivers/gpu/drm/vc4/vc4_firmware_kms.c
@@ -43,6 +43,7 @@ struct vc4_crtc {
 
 	struct drm_pending_vblank_event *event;
 	u32 overscan[4];
+	bool vblank_enabled;
 };
 
 static inline struct vc4_crtc *to_vc4_crtc(struct drm_crtc *crtc)
@@ -420,7 +421,8 @@ static irqreturn_t vc4_crtc_irq_handler(int irq, void *data)
 
 	if (stat & SMICS_INTERRUPTS) {
 		writel(0, vc4_crtc->regs + SMICS);
-		drm_crtc_handle_vblank(&vc4_crtc->base);
+		if (vc4_crtc->vblank_enabled)
+			drm_crtc_handle_vblank(&vc4_crtc->base);
 		vc4_crtc_handle_page_flip(vc4_crtc);
 		ret = IRQ_HANDLED;
 	}
@@ -443,9 +445,9 @@ static int vc4_page_flip(struct drm_crtc *crtc,
 
 static int vc4_fkms_enable_vblank(struct drm_crtc *crtc)
 {
-	/* XXX: Need a way to enable/disable the interrupt, to avoid
-	 * DRM warnings at boot time.
-	 */
+	struct vc4_crtc *vc4_crtc = to_vc4_crtc(crtc);
+
+	vc4_crtc->vblank_enabled = true;
 
 	return 0;
 }
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1119_b0da0931d7e30b10ea0d9491f0c496578461c017.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1119_b0da0931d7e30b10ea0d9491f0c496578461c017.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
