commit 6f0bd77301ca03d08973f6c5b883808d413453a4
Author: ghollingworth <gordon@raspberrypi.org>
Date:   Wed Aug 20 20:52:31 2014 +0100

    gpio: Fix for GPIO interrupts higher than pin 32

diff --git a/arch/arm/mach-bcm2708/bcm2708_gpio.c b/arch/arm/mach-bcm2708/bcm2708_gpio.c
index 120929ff..5fb845a 100644
--- a/arch/arm/mach-bcm2708/bcm2708_gpio.c
+++ b/arch/arm/mach-bcm2708/bcm2708_gpio.c
@@ -56,10 +56,10 @@ struct bcm2708_gpio {
 	struct list_head list;
 	void __iomem *base;
 	struct gpio_chip gc;
-	unsigned long rising;
-	unsigned long falling;
-	unsigned long high;
-	unsigned long low;
+	unsigned long rising[(BCM2708_NR_GPIOS + 31) / 32];
+	unsigned long falling[(BCM2708_NR_GPIOS + 31) / 32];
+	unsigned long high[(BCM2708_NR_GPIOS + 31) / 32];
+	unsigned long low[(BCM2708_NR_GPIOS + 31) / 32];
 };
 
 static int bcm2708_set_function(struct gpio_chip *gc, unsigned offset,
@@ -146,23 +146,26 @@ static int bcm2708_gpio_irq_set_type(struct irq_data *d, unsigned type)
 {
 	unsigned irq = d->irq;
 	struct bcm2708_gpio *gpio = irq_get_chip_data(irq);
+	unsigned gn = irq_to_gpio(irq);
+	unsigned gb = gn / 32;
+	unsigned go = gn % 32;
 
-	gpio->rising  &= ~(1 << irq_to_gpio(irq));
-	gpio->falling &= ~(1 << irq_to_gpio(irq));
-	gpio->high    &= ~(1 << irq_to_gpio(irq));
-	gpio->low     &= ~(1 << irq_to_gpio(irq));
+	gpio->rising[gb]  &= ~(1 << go);
+	gpio->falling[gb] &= ~(1 << go);
+	gpio->high[gb]    &= ~(1 << go);
+	gpio->low[gb]     &= ~(1 << go);
 
 	if (type & ~(IRQ_TYPE_EDGE_FALLING | IRQ_TYPE_EDGE_RISING | IRQ_TYPE_LEVEL_LOW | IRQ_TYPE_LEVEL_HIGH))
 		return -EINVAL;
 
 	if (type & IRQ_TYPE_EDGE_RISING)
-		gpio->rising |= (1 << irq_to_gpio(irq));
+		gpio->rising[gb] |= (1 << go);
 	if (type & IRQ_TYPE_EDGE_FALLING)
-		gpio->falling |= (1 << irq_to_gpio(irq));
+		gpio->falling[gb] |= (1 << go);
 	if (type & IRQ_TYPE_LEVEL_HIGH)
-		gpio->high |= (1 << irq_to_gpio(irq));
+		gpio->high[gb] |= (1 << go);
 	if (type & IRQ_TYPE_LEVEL_LOW)
-		gpio->low |= (1 << irq_to_gpio(irq));
+		gpio->low[gb] |= (1 << go);
 	return 0;
 }
 
@@ -191,37 +194,36 @@ static void bcm2708_gpio_irq_unmask(struct irq_data *d)
 	struct bcm2708_gpio *gpio = irq_get_chip_data(irq);
 	unsigned gn = irq_to_gpio(irq);
 	unsigned gb = gn / 32;
+	unsigned go = gn % 32;
 	unsigned long rising  = readl(gpio->base + GPIOREN(gb));
 	unsigned long falling = readl(gpio->base + GPIOFEN(gb));
 	unsigned long high    = readl(gpio->base + GPIOHEN(gb));
 	unsigned long low     = readl(gpio->base + GPIOLEN(gb));
 
-	gn = gn % 32;
-
-	writel(1 << gn, gpio->base + GPIOEDS(gb));
+	writel(1 << go, gpio->base + GPIOEDS(gb));
 
-	if (gpio->rising & (1 << gn)) {
-		writel(rising |  (1 << gn), gpio->base + GPIOREN(gb));
+	if (gpio->rising[gb] & (1 << go)) {
+		writel(rising |  (1 << go), gpio->base + GPIOREN(gb));
 	} else {
-		writel(rising & ~(1 << gn), gpio->base + GPIOREN(gb));
+		writel(rising & ~(1 << go), gpio->base + GPIOREN(gb));
 	}
 
-	if (gpio->falling & (1 << gn)) {
-		writel(falling |  (1 << gn), gpio->base + GPIOFEN(gb));
+	if (gpio->falling[gb] & (1 << go)) {
+		writel(falling |  (1 << go), gpio->base + GPIOFEN(gb));
 	} else {
-		writel(falling & ~(1 << gn), gpio->base + GPIOFEN(gb));
+		writel(falling & ~(1 << go), gpio->base + GPIOFEN(gb));
 	}
 
-	if (gpio->high & (1 << gn)) {
-		writel(high |  (1 << gn), gpio->base + GPIOHEN(gb));
+	if (gpio->high[gb] & (1 << go)) {
+		writel(high |  (1 << go), gpio->base + GPIOHEN(gb));
 	} else {
-		writel(high & ~(1 << gn), gpio->base + GPIOHEN(gb));
+		writel(high & ~(1 << go), gpio->base + GPIOHEN(gb));
 	}
 
-	if (gpio->low & (1 << gn)) {
-		writel(low |  (1 << gn), gpio->base + GPIOLEN(gb));
+	if (gpio->low[gb] & (1 << go)) {
+		writel(low |  (1 << go), gpio->base + GPIOLEN(gb));
 	} else {
-		writel(low & ~(1 << gn), gpio->base + GPIOLEN(gb));
+		writel(low & ~(1 << go), gpio->base + GPIOLEN(gb));
 	}
 }
 
