commit ad9fdb4819a28282c07f5a2102d679f3b61a45f5
Author: Dave Stevenson <dave.stevenson@raspberrypi.org>
Date:   Tue Oct 23 15:27:21 2018 +0100

    ASoC: googlevoicehat-codec: Reformat for kernel coding standards
    
    Fix all whitespace, indentation, and bracing errors.
    
    Signed-off-by: Dave Stevenson <dave.stevenson@raspberrypi.org>

diff --git a/sound/soc/bcm/googlevoicehat-codec.c b/sound/soc/bcm/googlevoicehat-codec.c
index 187706ce5f1e..cc22c7723474 100644
--- a/sound/soc/bcm/googlevoicehat-codec.c
+++ b/sound/soc/bcm/googlevoicehat-codec.c
@@ -30,158 +30,179 @@
 #include <sound/soc-dai.h>
 #include <sound/soc-dapm.h>
 
-#define ICS43432_RATE_MIN_HZ 7190  /* from data sheet */
-#define ICS43432_RATE_MAX_HZ 52800 /* from data sheet */
-#define SDMODE_DELAY_MS \
-  5 /* Delay in enabling SDMODE after clock settles to remove pop */
+#define ICS43432_RATE_MIN_HZ	7190  /* from data sheet */
+#define ICS43432_RATE_MAX_HZ	52800 /* from data sheet */
+/* Delay in enabling SDMODE after clock settles to remove pop */
+#define SDMODE_DELAY_MS		5
 
 struct voicehat_priv {
-  struct delayed_work enable_sdmode_work;
-  struct gpio_desc *sdmode_gpio;
-  unsigned int sdmode_delay;
+	struct delayed_work enable_sdmode_work;
+	struct gpio_desc *sdmode_gpio;
+	unsigned int sdmode_delay;
 };
 
-static void voicehat_enable_sdmode_work(struct work_struct *work) {
-  struct voicehat_priv *voicehat =
-      container_of(work, struct voicehat_priv, enable_sdmode_work.work);
-  gpiod_set_value(voicehat->sdmode_gpio, 1);
+static void voicehat_enable_sdmode_work(struct work_struct *work)
+{
+	struct voicehat_priv *voicehat = container_of(work,
+						      struct voicehat_priv,
+						      enable_sdmode_work.work);
+	gpiod_set_value(voicehat->sdmode_gpio, 1);
 }
 
-static int voicehat_component_probe(struct snd_soc_component *component) {
-  struct voicehat_priv *voicehat = snd_soc_component_get_drvdata(component);
-
-  voicehat->sdmode_gpio = devm_gpiod_get(component->dev, "sdmode", GPIOD_OUT_LOW);
-  if (IS_ERR(voicehat->sdmode_gpio)) {
-    dev_err(component->dev, "Unable to allocate GPIO pin\n");
-    return PTR_ERR(voicehat->sdmode_gpio);
-  }
-
-  INIT_DELAYED_WORK(&voicehat->enable_sdmode_work, voicehat_enable_sdmode_work);
-  return 0;
+static int voicehat_component_probe(struct snd_soc_component *component)
+{
+	struct voicehat_priv *voicehat =
+				snd_soc_component_get_drvdata(component);
+
+	voicehat->sdmode_gpio = devm_gpiod_get(component->dev, "sdmode",
+					       GPIOD_OUT_LOW);
+	if (IS_ERR(voicehat->sdmode_gpio)) {
+		dev_err(component->dev, "Unable to allocate GPIO pin\n");
+		return PTR_ERR(voicehat->sdmode_gpio);
+	}
+
+	INIT_DELAYED_WORK(&voicehat->enable_sdmode_work,
+			  voicehat_enable_sdmode_work);
+	return 0;
 }
 
-static void voicehat_component_remove(struct snd_soc_component *component) {
-  struct voicehat_priv *voicehat = snd_soc_component_get_drvdata(component);
+static void voicehat_component_remove(struct snd_soc_component *component)
+{
+	struct voicehat_priv *voicehat =
+				snd_soc_component_get_drvdata(component);
 
-  cancel_delayed_work_sync(&voicehat->enable_sdmode_work);
+	cancel_delayed_work_sync(&voicehat->enable_sdmode_work);
 }
 
 static const struct snd_soc_dapm_widget voicehat_dapm_widgets[] = {
-    SND_SOC_DAPM_OUTPUT("Speaker"),
+	SND_SOC_DAPM_OUTPUT("Speaker"),
 };
 
 static const struct snd_soc_dapm_route voicehat_dapm_routes[] = {
-    {"Speaker", NULL, "HiFi Playback"},
+	{"Speaker", NULL, "HiFi Playback"},
 };
 
 static struct snd_soc_component_driver voicehat_component_driver = {
-    .probe = voicehat_component_probe,
-    .remove = voicehat_component_remove,
-    .dapm_widgets = voicehat_dapm_widgets,
-    .num_dapm_widgets = ARRAY_SIZE(voicehat_dapm_widgets),
-    .dapm_routes = voicehat_dapm_routes,
-    .num_dapm_routes = ARRAY_SIZE(voicehat_dapm_routes),
+	.probe = voicehat_component_probe,
+	.remove = voicehat_component_remove,
+	.dapm_widgets = voicehat_dapm_widgets,
+	.num_dapm_widgets = ARRAY_SIZE(voicehat_dapm_widgets),
+	.dapm_routes = voicehat_dapm_routes,
+	.num_dapm_routes = ARRAY_SIZE(voicehat_dapm_routes),
 };
 
 static int voicehat_daiops_trigger(struct snd_pcm_substream *substream, int cmd,
-                                struct snd_soc_dai *dai) {
-  struct snd_soc_component *component = dai->component;
-  struct voicehat_priv *voicehat = snd_soc_component_get_drvdata(component);
-
-  if (voicehat->sdmode_delay == 0) return 0;
-
-  dev_dbg(dai->dev, "CMD             %d", cmd);
-  dev_dbg(dai->dev, "Playback Active %d", dai->playback_active);
-  dev_dbg(dai->dev, "Capture Active  %d", dai->capture_active);
-
-  switch (cmd) {
-    case SNDRV_PCM_TRIGGER_START:
-    case SNDRV_PCM_TRIGGER_RESUME:
-    case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
-      if (dai->playback_active) {
-        dev_info(dai->dev, "Enabling audio amp...\n");
-        queue_delayed_work(system_power_efficient_wq,
-                           &voicehat->enable_sdmode_work,
-                           msecs_to_jiffies(voicehat->sdmode_delay));
-      }
-      break;
-    case SNDRV_PCM_TRIGGER_STOP:
-    case SNDRV_PCM_TRIGGER_SUSPEND:
-    case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
-      if (dai->playback_active) {
-        cancel_delayed_work(&voicehat->enable_sdmode_work);
-        dev_info(dai->dev, "Disabling audio amp...\n");
-        gpiod_set_value(voicehat->sdmode_gpio, 0);
-      }
-      break;
-  }
-  return 0;
+				   struct snd_soc_dai *dai)
+{
+	struct snd_soc_component *component = dai->component;
+	struct voicehat_priv *voicehat =
+				snd_soc_component_get_drvdata(component);
+
+	if (voicehat->sdmode_delay == 0)
+		return 0;
+
+	dev_dbg(dai->dev, "CMD             %d", cmd);
+	dev_dbg(dai->dev, "Playback Active %d", dai->playback_active);
+	dev_dbg(dai->dev, "Capture Active  %d", dai->capture_active);
+
+	switch (cmd) {
+	case SNDRV_PCM_TRIGGER_START:
+	case SNDRV_PCM_TRIGGER_RESUME:
+	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+		if (dai->playback_active) {
+			dev_info(dai->dev, "Enabling audio amp...\n");
+			queue_delayed_work(
+				system_power_efficient_wq,
+				&voicehat->enable_sdmode_work,
+				msecs_to_jiffies(voicehat->sdmode_delay));
+		}
+		break;
+	case SNDRV_PCM_TRIGGER_STOP:
+	case SNDRV_PCM_TRIGGER_SUSPEND:
+	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+		if (dai->playback_active) {
+			cancel_delayed_work(&voicehat->enable_sdmode_work);
+			dev_info(dai->dev, "Disabling audio amp...\n");
+			gpiod_set_value(voicehat->sdmode_gpio, 0);
+		}
+		break;
+	}
+	return 0;
 }
 
 static const struct snd_soc_dai_ops voicehat_dai_ops = {
-    .trigger = voicehat_daiops_trigger,
+	.trigger = voicehat_daiops_trigger,
 };
 
 static struct snd_soc_dai_driver voicehat_dai = {
-    .name = "voicehat-hifi",
-    .capture = {.stream_name = "HiFi Capture",
-                .channels_min = 2,
-                .channels_max = 2,
-                .rates = SNDRV_PCM_RATE_48000,
-                .formats = SNDRV_PCM_FMTBIT_S32_LE},
-    .playback = {.stream_name = "HiFi Playback",
-                 .channels_min = 2,
-                 .channels_max = 2,
-                 .rates = SNDRV_PCM_RATE_48000,
-                 .formats = SNDRV_PCM_FMTBIT_S32_LE},
-    .ops = &voicehat_dai_ops,
-    .symmetric_rates = 1};
+	.name = "voicehat-hifi",
+	.capture = {
+		.stream_name = "HiFi Capture",
+		.channels_min = 2,
+		.channels_max = 2,
+		.rates = SNDRV_PCM_RATE_48000,
+		.formats = SNDRV_PCM_FMTBIT_S32_LE
+	},
+	.playback = {
+		.stream_name = "HiFi Playback",
+		.channels_min = 2,
+		.channels_max = 2,
+		.rates = SNDRV_PCM_RATE_48000,
+		.formats = SNDRV_PCM_FMTBIT_S32_LE
+	},
+	.ops = &voicehat_dai_ops,
+	.symmetric_rates = 1
+};
 
 #ifdef CONFIG_OF
 static const struct of_device_id voicehat_ids[] = {
-    {
-        .compatible = "google,voicehat",
-    },
-    {}};
-MODULE_DEVICE_TABLE(of, voicehat_ids);
+		{ .compatible = "google,voicehat", }, {}
+	};
+	MODULE_DEVICE_TABLE(of, voicehat_ids);
 #endif
 
-static int voicehat_platform_probe(struct platform_device *pdev) {
-  struct voicehat_priv *voicehat;
-  int ret;
-
-  voicehat = devm_kzalloc(&pdev->dev, sizeof(*voicehat), GFP_KERNEL);
-  if (!voicehat) return -ENOMEM;
-
-  ret = device_property_read_u32(&pdev->dev, "voicehat_sdmode_delay",
-                                 &voicehat->sdmode_delay);
-
-  if (ret) {
-    voicehat->sdmode_delay = SDMODE_DELAY_MS;
-    dev_info(&pdev->dev,
-             "property 'voicehat_sdmode_delay' not found default 5 mS");
-  } else {
-    dev_info(&pdev->dev, "property 'voicehat_sdmode_delay' found delay= %d mS",
-             voicehat->sdmode_delay);
-  }
-
-  dev_set_drvdata(&pdev->dev, voicehat);
-
-  return snd_soc_register_component(&pdev->dev, &voicehat_component_driver, &voicehat_dai, 1);
+static int voicehat_platform_probe(struct platform_device *pdev)
+{
+	struct voicehat_priv *voicehat;
+	int ret;
+
+	voicehat = devm_kzalloc(&pdev->dev, sizeof(*voicehat), GFP_KERNEL);
+	if (!voicehat)
+		return -ENOMEM;
+
+	ret = device_property_read_u32(&pdev->dev, "voicehat_sdmode_delay",
+				       &voicehat->sdmode_delay);
+
+	if (ret) {
+		voicehat->sdmode_delay = SDMODE_DELAY_MS;
+		dev_info(&pdev->dev,
+			 "property 'voicehat_sdmode_delay' not found default 5 mS");
+	} else {
+		dev_info(&pdev->dev, "property 'voicehat_sdmode_delay' found delay= %d mS",
+			 voicehat->sdmode_delay);
+	}
+
+	dev_set_drvdata(&pdev->dev, voicehat);
+
+	return snd_soc_register_component(&pdev->dev,
+					  &voicehat_component_driver,
+					  &voicehat_dai,
+					  1);
 }
 
-static int voicehat_platform_remove(struct platform_device *pdev) {
-  snd_soc_unregister_component(&pdev->dev);
-  return 0;
+static int voicehat_platform_remove(struct platform_device *pdev)
+{
+	snd_soc_unregister_component(&pdev->dev);
+	return 0;
 }
 
 static struct platform_driver voicehat_driver = {
-    .driver =
-        {
-            .name = "voicehat-codec", .of_match_table = of_match_ptr(voicehat_ids),
-        },
-    .probe = voicehat_platform_probe,
-    .remove = voicehat_platform_remove,
+	.driver = {
+		.name = "voicehat-codec",
+		.of_match_table = of_match_ptr(voicehat_ids),
+	},
+	.probe = voicehat_platform_probe,
+	.remove = voicehat_platform_remove,
 };
 
 module_platform_driver(voicehat_driver);
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1215_ad9fdb4819a28282c07f5a2102d679f3b61a45f5.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1215_ad9fdb4819a28282c07f5a2102d679f3b61a45f5.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
