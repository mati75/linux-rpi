commit 608677656ac2c02fbab0fc569ec0629ef9a5e71c
Author: Harry Pan <harry.pan@intel.com>
Date:   Fri Sep 14 16:58:16 2018 +0800

    usb: core: safely deal with the dynamic quirk lists
    
    commit 16c4cb19fa85c648a803752eb63cac0ef69231c2 upstream.
    
    Applying dynamic usbcore quirks in early booting when the slab is
    not yet ready would cause kernel panic of null pointer dereference
    because the quirk_count has been counted as 1 while the quirk_list
    was failed to allocate.
    
    i.e.,
    [    1.044970] BUG: unable to handle kernel NULL pointer dereference at           (null)
    [    1.044995] IP: [<ffffffffb0953ec7>] usb_detect_quirks+0x88/0xd1
    [    1.045016] PGD 0
    [    1.045026] Oops: 0000 [#1] PREEMPT SMP
    [    1.046986] gsmi: Log Shutdown Reason 0x03
    [    1.046995] Modules linked in:
    [    1.047008] CPU: 0 PID: 81 Comm: kworker/0:3 Not tainted 4.4.154 #28
    [    1.047016] Hardware name: Google Coral/Coral, BIOS Google_Coral.10068.27.0 12/04/2017
    [    1.047028] Workqueue: usb_hub_wq hub_event
    [    1.047037] task: ffff88017a321c80 task.stack: ffff88017a384000
    [    1.047044] RIP: 0010:[<ffffffffb0953ec7>]  [<ffffffffb0953ec7>] usb_detect_quirks+0x88/0xd1
    
    To tackle this odd, let's balance the quirk_count to 0 when the kcalloc
    call fails, and defer the quirk setting into a lower level callback
    which ensures that the kernel memory management has been initialized.
    
    Fixes: 027bd6cafd9a ("usb: core: Add "quirks" parameter for usbcore")
    Signed-off-by: Harry Pan <harry.pan@intel.com>
    Acked-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/core/quirks.c b/drivers/usb/core/quirks.c
index e77dfe5ed5ec..178d6c6063c0 100644
--- a/drivers/usb/core/quirks.c
+++ b/drivers/usb/core/quirks.c
@@ -58,6 +58,7 @@ static int quirks_param_set(const char *val, const struct kernel_param *kp)
 	quirk_list = kcalloc(quirk_count, sizeof(struct quirk_entry),
 			     GFP_KERNEL);
 	if (!quirk_list) {
+		quirk_count = 0;
 		mutex_unlock(&quirk_mutex);
 		return -ENOMEM;
 	}
@@ -154,7 +155,7 @@ static struct kparam_string quirks_param_string = {
 	.string = quirks_param,
 };
 
-module_param_cb(quirks, &quirks_param_ops, &quirks_param_string, 0644);
+device_param_cb(quirks, &quirks_param_ops, &quirks_param_string, 0644);
 MODULE_PARM_DESC(quirks, "Add/modify USB quirks by specifying quirks=vendorID:productID:quirks");
 
 /* Lists of quirky USB devices, split in device quirks and interface quirks.
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1239_608677656ac2c02fbab0fc569ec0629ef9a5e71c.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1239_608677656ac2c02fbab0fc569ec0629ef9a5e71c.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
