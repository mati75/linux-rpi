commit 5132f91318ed21dfc76cd405416785106fe591ca
Author: David Howells <dhowells@redhat.com>
Date:   Tue Nov 27 16:34:55 2018 +0000

    cachefiles: Fix an assertion failure when trying to update a failed object
    
    [ Upstream commit e6bc06faf64a83384cc0abc537df954c9d3ff942 ]
    
    If cachefiles gets an error other then ENOENT when trying to look up an
    object in the cache (in this case, EACCES), the object state machine will
    eventually transition to the DROP_OBJECT state.
    
    This state invokes fscache_drop_object() which tries to sync the auxiliary
    data with the cache (this is done lazily since commit 402cb8dda949d) on an
    incomplete cache object struct.
    
    The problem comes when cachefiles_update_object_xattr() is called to
    rewrite the xattr holding the data.  There's an assertion there that the
    cache object points to a dentry as we're going to update its xattr.  The
    assertion trips, however, as dentry didn't get set.
    
    Fix the problem by skipping the update in cachefiles if the object doesn't
    refer to a dentry.  A better way to do it could be to skip the update from
    the DROP_OBJECT state handler in fscache, but that might deny the cache the
    opportunity to update intermediate state.
    
    If this error occurs, the kernel log includes lines that look like the
    following:
    
     CacheFiles: Lookup failed error -13
     CacheFiles:
     CacheFiles: Assertion failed
     ------------[ cut here ]------------
     kernel BUG at fs/cachefiles/xattr.c:138!
     ...
     Workqueue: fscache_object fscache_object_work_func [fscache]
     RIP: 0010:cachefiles_update_object_xattr.cold.4+0x18/0x1a [cachefiles]
     ...
     Call Trace:
      cachefiles_update_object+0xdd/0x1c0 [cachefiles]
      fscache_update_aux_data+0x23/0x30 [fscache]
      fscache_drop_object+0x18e/0x1c0 [fscache]
      fscache_object_work_func+0x74/0x2b0 [fscache]
      process_one_work+0x18d/0x340
      worker_thread+0x2e/0x390
      ? pwq_unbound_release_workfn+0xd0/0xd0
      kthread+0x112/0x130
      ? kthread_bind+0x30/0x30
      ret_from_fork+0x35/0x40
    
    Note that there are actually two issues here: (1) EACCES happened on a
    cache object and (2) an oops occurred.  I think that the second is a
    consequence of the first (it certainly looks like it ought to be).  This
    patch only deals with the second.
    
    Fixes: 402cb8dda949 ("fscache: Attach the index key and aux data to the cookie")
    Reported-by: Zhibin Li <zhibli@redhat.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

diff --git a/fs/cachefiles/xattr.c b/fs/cachefiles/xattr.c
index 0a29a00aed2e..511e6c68156a 100644
--- a/fs/cachefiles/xattr.c
+++ b/fs/cachefiles/xattr.c
@@ -135,7 +135,8 @@ int cachefiles_update_object_xattr(struct cachefiles_object *object,
 	struct dentry *dentry = object->dentry;
 	int ret;
 
-	ASSERT(dentry);
+	if (!dentry)
+		return -ESTALE;
 
 	_enter("%p,#%d", object, auxdata->len);
 
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1103_5132f91318ed21dfc76cd405416785106fe591ca.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1103_5132f91318ed21dfc76cd405416785106fe591ca.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
