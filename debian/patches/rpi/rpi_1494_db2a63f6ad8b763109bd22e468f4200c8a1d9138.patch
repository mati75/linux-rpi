commit db2a63f6ad8b763109bd22e468f4200c8a1d9138
Author: Gustavo Romero <gromero@linux.vnet.ibm.com>
Date:   Wed Sep 13 22:13:48 2017 -0400

    powerpc/tm: Flush TM only if CPU has TM feature
    
    commit c1fa0768a8713b135848f78fd43ffc208d8ded70 upstream.
    
    Commit cd63f3c ("powerpc/tm: Fix saving of TM SPRs in core dump")
    added code to access TM SPRs in flush_tmregs_to_thread(). However
    flush_tmregs_to_thread() does not check if TM feature is available on
    CPU before trying to access TM SPRs in order to copy live state to
    thread structures. flush_tmregs_to_thread() is indeed guarded by
    CONFIG_PPC_TRANSACTIONAL_MEM but it might be the case that kernel
    was compiled with CONFIG_PPC_TRANSACTIONAL_MEM enabled and ran on
    a CPU without TM feature available, thus rendering the execution
    of TM instructions that are treated by the CPU as illegal instructions.
    
    The fix is just to add proper checking in flush_tmregs_to_thread()
    if CPU has the TM feature before accessing any TM-specific resource,
    returning immediately if TM is no available on the CPU. Adding
    that checking in flush_tmregs_to_thread() instead of in places
    where it is called, like in vsr_get() and vsr_set(), is better because
    avoids the same problem cropping up elsewhere.
    
    Fixes: cd63f3c ("powerpc/tm: Fix saving of TM SPRs in core dump")
    Signed-off-by: Gustavo Romero <gromero@linux.vnet.ibm.com>
    Reviewed-by: Cyril Bur <cyrilbur@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/powerpc/kernel/ptrace.c b/arch/powerpc/kernel/ptrace.c
index dcbb9144c16d..d97370866a5f 100644
--- a/arch/powerpc/kernel/ptrace.c
+++ b/arch/powerpc/kernel/ptrace.c
@@ -131,7 +131,7 @@ static void flush_tmregs_to_thread(struct task_struct *tsk)
 	 * in the appropriate thread structures from live.
 	 */
 
-	if (tsk != current)
+	if ((!cpu_has_feature(CPU_FTR_TM)) || (tsk != current))
 		return;
 
 	if (MSR_TM_SUSPENDED(mfmsr())) {
