commit 1f1aedd6b19a1e07c3d830842e36258fb9d47b4d
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Wed Nov 21 13:53:17 2018 -0800

    tools: bpftool: fix potential NULL pointer dereference in do_load
    
    [ Upstream commit dde7011a824cfa815b03f853ec985ff46b740939 ]
    
    This patch fixes a possible null pointer dereference in
    do_load, detected by the semantic patch deref_null.cocci,
    with the following warning:
    
    ./tools/bpf/bpftool/prog.c:1021:23-25: ERROR: map_replace is NULL but dereferenced.
    
    The following code has potential null pointer references:
    881             map_replace = reallocarray(map_replace, old_map_fds + 1,
    882                                        sizeof(*map_replace));
    883             if (!map_replace) {
    884                     p_err("mem alloc failed");
    885                     goto err_free_reuse_maps;
    886             }
    
    ...
    1019 err_free_reuse_maps:
    1020         for (i = 0; i < old_map_fds; i++)
    1021                 close(map_replace[i].fd);
    1022         free(map_replace);
    
    Fixes: 3ff5a4dc5d89 ("tools: bpftool: allow reuse of maps with bpftool prog load")
    Co-developed-by: Wen Yang <wen.yang99@zte.com.cn>
    Signed-off-by: Wen Yang <wen.yang99@zte.com.cn>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

diff --git a/tools/bpf/bpftool/prog.c b/tools/bpf/bpftool/prog.c
index dce960d22106..0de024a6cc2b 100644
--- a/tools/bpf/bpftool/prog.c
+++ b/tools/bpf/bpftool/prog.c
@@ -749,6 +749,7 @@ static int do_load(int argc, char **argv)
 			}
 			NEXT_ARG();
 		} else if (is_prefix(*argv, "map")) {
+			void *new_map_replace;
 			char *endptr, *name;
 			int fd;
 
@@ -782,12 +783,15 @@ static int do_load(int argc, char **argv)
 			if (fd < 0)
 				goto err_free_reuse_maps;
 
-			map_replace = reallocarray(map_replace, old_map_fds + 1,
-						   sizeof(*map_replace));
-			if (!map_replace) {
+			new_map_replace = reallocarray(map_replace,
+						       old_map_fds + 1,
+						       sizeof(*map_replace));
+			if (!new_map_replace) {
 				p_err("mem alloc failed");
 				goto err_free_reuse_maps;
 			}
+			map_replace = new_map_replace;
+
 			map_replace[old_map_fds].idx = idx;
 			map_replace[old_map_fds].name = name;
 			map_replace[old_map_fds].fd = fd;
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1075_1f1aedd6b19a1e07c3d830842e36258fb9d47b4d.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1075_1f1aedd6b19a1e07c3d830842e36258fb9d47b4d.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
