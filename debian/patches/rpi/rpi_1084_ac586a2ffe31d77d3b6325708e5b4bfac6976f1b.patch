commit ac586a2ffe31d77d3b6325708e5b4bfac6976f1b
Author: Steve Muckle <smuckle@google.com>
Date:   Fri Aug 31 15:42:17 2018 -0700

    sched/fair: Fix vruntime_normalized() for remote non-migration wakeup
    
    commit d0cdb3ce8834332d918fc9c8ff74f8a169ec9abe upstream.
    
    When a task which previously ran on a given CPU is remotely queued to
    wake up on that same CPU, there is a period where the task's state is
    TASK_WAKING and its vruntime is not normalized. This is not accounted
    for in vruntime_normalized() which will cause an error in the task's
    vruntime if it is switched from the fair class during this time.
    
    For example if it is boosted to RT priority via rt_mutex_setprio(),
    rq->min_vruntime will not be subtracted from the task's vruntime but
    it will be added again when the task returns to the fair class. The
    task's vruntime will have been erroneously doubled and the effective
    priority of the task will be reduced.
    
    Note this will also lead to inflation of all vruntimes since the doubled
    vruntime value will become the rq's min_vruntime when other tasks leave
    the rq. This leads to repeated doubling of the vruntime and priority
    penalty.
    
    Fix this by recognizing a WAKING task's vruntime as normalized only if
    sched_remote_wakeup is true. This indicates a migration, in which case
    the vruntime would have been normalized in migrate_task_rq_fair().
    
    Based on a similar patch from John Dias <joaodias@google.com>.
    
    Suggested-by: Peter Zijlstra <peterz@infradead.org>
    Tested-by: Dietmar Eggemann <dietmar.eggemann@arm.com>
    Signed-off-by: Steve Muckle <smuckle@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Chris Redpath <Chris.Redpath@arm.com>
    Cc: John Dias <joaodias@google.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Miguel de Dios <migueldedios@google.com>
    Cc: Morten Rasmussen <Morten.Rasmussen@arm.com>
    Cc: Patrick Bellasi <Patrick.Bellasi@arm.com>
    Cc: Paul Turner <pjt@google.com>
    Cc: Quentin Perret <quentin.perret@arm.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Todd Kjos <tkjos@google.com>
    Cc: kernel-team@android.com
    Fixes: b5179ac70de8 ("sched/fair: Prepare to fix fairness problems on migration")
    Link: http://lkml.kernel.org/r/20180831224217.169476-1-smuckle@google.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 478d9d3e6be9..26526fc41f0d 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -10019,7 +10019,8 @@ static inline bool vruntime_normalized(struct task_struct *p)
 	 * - A task which has been woken up by try_to_wake_up() and
 	 *   waiting for actually being woken up by sched_ttwu_pending().
 	 */
-	if (!se->sum_exec_runtime || p->state == TASK_WAKING)
+	if (!se->sum_exec_runtime ||
+	    (p->state == TASK_WAKING && p->sched_remote_wakeup))
 		return true;
 
 	return false;
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1084_ac586a2ffe31d77d3b6325708e5b4bfac6976f1b.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1084_ac586a2ffe31d77d3b6325708e5b4bfac6976f1b.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
