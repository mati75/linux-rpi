commit a502cd2dd4689f0092c27c450786731c087a56e6
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Tue Nov 7 10:40:40 2017 -0500

    dm integrity: allow unaligned bv_offset
    
    commit 95b1369a9638cfa322ad1c0cde8efbe524059884 upstream.
    
    When slub_debug is enabled kmalloc returns unaligned memory. XFS uses
    this unaligned memory for its buffers (if an unaligned buffer crosses a
    page, XFS frees it and allocates a full page instead - see the function
    xfs_buf_allocate_memory).
    
    dm-integrity checks if bv_offset is aligned on page size and this check
    fail with slub_debug and XFS.
    
    Fix this bug by removing the bv_offset check, leaving only the check for
    bv_len.
    
    Fixes: 7eada909bfd7 ("dm: add integrity target")
    Reported-by: Bruno Pr√©mont <bonbons@sysophe.eu>
    Reviewed-by: Milan Broz <gmazyland@gmail.com>
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/md/dm-integrity.c b/drivers/md/dm-integrity.c
index 096fe9b66c50..5e6737a44468 100644
--- a/drivers/md/dm-integrity.c
+++ b/drivers/md/dm-integrity.c
@@ -1376,7 +1376,7 @@ static int dm_integrity_map(struct dm_target *ti, struct bio *bio)
 		struct bvec_iter iter;
 		struct bio_vec bv;
 		bio_for_each_segment(bv, bio, iter) {
-			if (unlikely((bv.bv_offset | bv.bv_len) & ((ic->sectors_per_block << SECTOR_SHIFT) - 1))) {
+			if (unlikely(bv.bv_len & ((ic->sectors_per_block << SECTOR_SHIFT) - 1))) {
 				DMERR("Bio vector (%u,%u) is not aligned on %u-sector boundary",
 					bv.bv_offset, bv.bv_len, ic->sectors_per_block);
 				return DM_MAPIO_KILL;
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1035_a502cd2dd4689f0092c27c450786731c087a56e6.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1035_a502cd2dd4689f0092c27c450786731c087a56e6.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
