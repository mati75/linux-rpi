commit 90b54bccdd9793d6e906baeb5975afa337987db8
Author: Anup Patel <anup.patel@broadcom.com>
Date:   Tue Oct 3 10:51:48 2017 +0530

    mailbox: bcm-flexrm-mailbox: Fix FlexRM ring flush sequence
    
    commit a371c10ea4b38a5f120e86d906d404d50a0f4660 upstream.
    
    As-per suggestion from FlexRM HW folks, we have to first set
    FlexRM ring flush state and then clear it for FlexRM ring flush
    to work properly.
    
    Currently, the FlexRM driver has incomplete FlexRM ring flush
    sequence which causes repeated insmod+rmmod of mailbox client
    drivers to fail.
    
    This patch fixes FlexRM ring flush sequence in flexrm_shutdown()
    as described above.
    
    Fixes: dbc049eee730 ("mailbox: Add driver for Broadcom FlexRM
    ring manager")
    
    Signed-off-by: Anup Patel <anup.patel@broadcom.com>
    Reviewed-by: Scott Branden <scott.branden@broadcom.com>
    Signed-off-by: Jassi Brar <jaswinder.singh@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/mailbox/bcm-flexrm-mailbox.c b/drivers/mailbox/bcm-flexrm-mailbox.c
index ae6146311934..f052a3eb2098 100644
--- a/drivers/mailbox/bcm-flexrm-mailbox.c
+++ b/drivers/mailbox/bcm-flexrm-mailbox.c
@@ -1365,8 +1365,8 @@ static void flexrm_shutdown(struct mbox_chan *chan)
 	/* Disable/inactivate ring */
 	writel_relaxed(0x0, ring->regs + RING_CONTROL);
 
-	/* Flush ring with timeout of 1s */
-	timeout = 1000;
+	/* Set ring flush state */
+	timeout = 1000; /* timeout of 1s */
 	writel_relaxed(BIT(CONTROL_FLUSH_SHIFT),
 			ring->regs + RING_CONTROL);
 	do {
@@ -1374,7 +1374,23 @@ static void flexrm_shutdown(struct mbox_chan *chan)
 		    FLUSH_DONE_MASK)
 			break;
 		mdelay(1);
-	} while (timeout--);
+	} while (--timeout);
+	if (!timeout)
+		dev_err(ring->mbox->dev,
+			"setting ring%d flush state timedout\n", ring->num);
+
+	/* Clear ring flush state */
+	timeout = 1000; /* timeout of 1s */
+	writel_relaxed(0x0, ring + RING_CONTROL);
+	do {
+		if (!(readl_relaxed(ring + RING_FLUSH_DONE) &
+		      FLUSH_DONE_MASK))
+			break;
+		mdelay(1);
+	} while (--timeout);
+	if (!timeout)
+		dev_err(ring->mbox->dev,
+			"clearing ring%d flush state timedout\n", ring->num);
 
 	/* Abort all in-flight requests */
 	for (reqid = 0; reqid < RING_MAX_REQ_COUNT; reqid++) {
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1124_90b54bccdd9793d6e906baeb5975afa337987db8.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1124_90b54bccdd9793d6e906baeb5975afa337987db8.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
