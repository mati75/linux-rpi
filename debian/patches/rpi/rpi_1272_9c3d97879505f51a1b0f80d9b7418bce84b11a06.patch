commit 9c3d97879505f51a1b0f80d9b7418bce84b11a06
Author: John Fastabend <john.fastabend@gmail.com>
Date:   Wed Aug 22 08:37:32 2018 -0700

    tls: possible hang when do_tcp_sendpages hits sndbuf is full case
    
    [ Upstream commit 67db7cd249e71f64346f481b629724376d063e08 ]
    
    Currently, the lower protocols sk_write_space handler is not called if
    TLS is sending a scatterlist via  tls_push_sg. However, normally
    tls_push_sg calls do_tcp_sendpage, which may be under memory pressure,
    that in turn may trigger a wait via sk_wait_event. Typically, this
    happens when the in-flight bytes exceed the sdnbuf size. In the normal
    case when enough ACKs are received sk_write_space() will be called and
    the sk_wait_event will be woken up allowing it to send more data
    and/or return to the user.
    
    But, in the TLS case because the sk_write_space() handler does not
    wake up the events the above send will wait until the sndtimeo is
    exceeded. By default this is MAX_SCHEDULE_TIMEOUT so it look like a
    hang to the user (especially this impatient user). To fix this pass
    the sk_write_space event to the lower layers sk_write_space event
    which in the TCP case will wake any pending events.
    
    I observed the above while integrating sockmap and ktls. It
    initially appeared as test_sockmap (modified to use ktls) occasionally
    hanging. To reliably reproduce this reduce the sndbuf size and stress
    the tls layer by sending many 1B sends. This results in every byte
    needing a header and each byte individually being sent to the crypto
    layer.
    
    Signed-off-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Dave Watson <davejwatson@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/net/tls/tls_main.c b/net/tls/tls_main.c
index 2ccf194c3ebb..8015e50e8d0a 100644
--- a/net/tls/tls_main.c
+++ b/net/tls/tls_main.c
@@ -222,9 +222,14 @@ static void tls_write_space(struct sock *sk)
 {
 	struct tls_context *ctx = tls_get_ctx(sk);
 
-	/* We are already sending pages, ignore notification */
-	if (ctx->in_tcp_sendpages)
+	/* If in_tcp_sendpages call lower protocol write space handler
+	 * to ensure we wake up any waiting operations there. For example
+	 * if do_tcp_sendpages where to call sk_wait_event.
+	 */
+	if (ctx->in_tcp_sendpages) {
+		ctx->sk_write_space(sk);
 		return;
+	}
 
 	if (!sk->sk_write_pending && tls_is_pending_closed_record(ctx)) {
 		gfp_t sk_allocation = sk->sk_allocation;
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1272_9c3d97879505f51a1b0f80d9b7418bce84b11a06.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1272_9c3d97879505f51a1b0f80d9b7418bce84b11a06.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
