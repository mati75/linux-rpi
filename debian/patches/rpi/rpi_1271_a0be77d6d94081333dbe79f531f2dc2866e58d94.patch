commit a0be77d6d94081333dbe79f531f2dc2866e58d94
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Wed Aug 22 18:09:17 2018 +0200

    bpf, sockmap: fix sock hash count in alloc_sock_hash_elem
    
    [ Upstream commit eb29429d81e31b191f3b2bd19cf820279cec6463 ]
    
    When we try to allocate a new sock hash entry and the allocation
    fails, then sock hash map fails to reduce the map element counter,
    meaning we keep accounting this element although it was never used.
    Fix it by dropping the element counter on error.
    
    Fixes: 81110384441a ("bpf: sockmap, add hash map support")
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/kernel/bpf/sockmap.c b/kernel/bpf/sockmap.c
index dd87d930f036..e7f65afc4e24 100644
--- a/kernel/bpf/sockmap.c
+++ b/kernel/bpf/sockmap.c
@@ -2272,8 +2272,10 @@ static struct htab_elem *alloc_sock_hash_elem(struct bpf_htab *htab,
 	}
 	l_new = kmalloc_node(htab->elem_size, GFP_ATOMIC | __GFP_NOWARN,
 			     htab->map.numa_node);
-	if (!l_new)
+	if (!l_new) {
+		atomic_dec(&htab->count);
 		return ERR_PTR(-ENOMEM);
+	}
 
 	memcpy(l_new->key, key, key_size);
 	l_new->sk = sk;
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1271_a0be77d6d94081333dbe79f531f2dc2866e58d94.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1271_a0be77d6d94081333dbe79f531f2dc2866e58d94.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
