commit 384f18115267c0e52748137d6720c81b1cf220e1
Author: Matthew Wilcox <willy@infradead.org>
Date:   Tue Nov 27 13:16:33 2018 -0800

    dax: Check page->mapping isn't NULL
    
    commit c93db7bb6ef3251e0ea48ade311d3e9942748e1c upstream.
    
    If we race with inode destroy, it's possible for page->mapping to be
    NULL before we even enter this routine, as well as after having slept
    waiting for the dax entry to become unlocked.
    
    Fixes: c2a7d2a11552 ("filesystem-dax: Introduce dax_lock_mapping_entry()")
    Cc: <stable@vger.kernel.org>
    Reported-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Matthew Wilcox <willy@infradead.org>
    Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/fs/dax.c b/fs/dax.c
index b0cd1364c68f..3a2682a6c832 100644
--- a/fs/dax.c
+++ b/fs/dax.c
@@ -423,7 +423,7 @@ bool dax_lock_mapping_entry(struct page *page)
 	for (;;) {
 		mapping = READ_ONCE(page->mapping);
 
-		if (!dax_mapping(mapping))
+		if (!mapping || !dax_mapping(mapping))
 			break;
 
 		/*
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1133_384f18115267c0e52748137d6720c81b1cf220e1.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1133_384f18115267c0e52748137d6720c81b1cf220e1.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
